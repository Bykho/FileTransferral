import { Component, EventEmitter, Output } from '@angular/core';
import * as i0 from "@angular/core";
function getRandomNumberByRange(start, end) {
    return Math.round(Math.random() * (end - start) + start);
}
function createCanvas(width, height) {
    const canvas = createElement('canvas');
    canvas.width = width;
    canvas.height = height;
    return canvas;
}
function createImg(onload) {
    const img = createElement('img');
    img.crossOrigin = 'Anonymous';
    img.onload = onload;
    img.onerror = () => {
        img.src = getRandomImg();
    };
    img.src = getRandomImg();
    return img;
}
function createElement(tagName) {
    return document.createElement(tagName);
}
function addClass(tag, className) {
    tag.classList.add(className);
}
function removeClass(tag, className) {
    tag.classList.remove(className);
}
function getRandomImg() {
    return 'https://picsum.photos/300/150/?image=' + getRandomNumberByRange(0, 100);
}
function sum(x, y) {
    return x + y;
}
function square(x) {
    return x * x;
}
export class VerifyComponent {
    constructor() {
        this.sideWidth = 300;
        this.sideHeight = 150;
        this.sideRadius = 10;
        this.sideLength = 42;
        this.submit = new EventEmitter();
        //
    }
    ngOnInit() {
        this.init();
    }
    draw(ctx, operation, x, y) {
        const l = this.sideLength;
        const PI = Math.PI;
        const r = this.sideRadius;
        ctx.beginPath();
        ctx.moveTo(x, y);
        ctx.lineTo(x + l / 2, y);
        ctx.arc(x + l / 2, y - r + 2, r, 0, 2 * PI);
        ctx.lineTo(x + l / 2, y);
        ctx.lineTo(x + l, y);
        ctx.lineTo(x + l, y + l / 2);
        ctx.arc(x + l + r - 2, y + l / 2, r, 0, 2 * PI);
        ctx.lineTo(x + l, y + l / 2);
        ctx.lineTo(x + l, y + l);
        ctx.lineTo(x, y + l);
        ctx.lineTo(x, y);
        ctx.fillStyle = '#fff';
        ctx[operation]();
        ctx.beginPath();
        ctx.arc(x, y + l / 2, r, 1.5 * PI, 0.5 * PI);
        ctx.globalCompositeOperation = 'xor';
        ctx.fill();
    }
    init() {
        this.reallyLength = this.sideLength + this.sideRadius * 2;
        this.root = document.getElementById('verify');
        this.initDOM();
        this.initImg();
        this.drawPic();
        this.bindEvents();
    }
    initDOM() {
        const canvas = createCanvas(this.sideWidth, this.sideHeight); // 画布
        const block = canvas.cloneNode(true); // 滑块
        const sliderContainer = createElement('div');
        const refreshIcon = createElement('div');
        const sliderMask = createElement('div');
        const slider = createElement('div');
        const sliderIcon = createElement('span');
        const text = createElement('span');
        block.className = 'block';
        sliderContainer.className = 'sliderContainer';
        refreshIcon.className = 'refreshIcon';
        refreshIcon.innerHTML = '<svg viewBox="64 64 896 896" fill="currentColor"\ ' +
            'width="1em" height="1em" data-icon="redo" aria-hidden="true">' +
            '<path d="M758.2 839.1C851.8 765.9 912 651.9 912 523.9 912 303 733.5' +
            ' 124.3 512.6 124 291.4 123.7 112 302.8 112 523.9c0 125.2 57.5 236.9' +
            ' 147.6 310.2 3.5 2.8 8.6 2.2 11.4-1.3l39.4-50.5c2.7-3.4' +
            ' 2.1-8.3-1.2-11.1-8.1-6.6-15.9-13.7-23.4-21.2a318.64 318.64' +
            ' 0 0 1-68.6-101.7C200.4 609 192 567.1 192 523.9s8.4-85.1' +
            ' 25.1-124.5c16.1-38.1 39.2-72.3 68.6-101.7 29.4-29.4 63.6-52.5' +
            ' 101.7-68.6C426.9 212.4 468.8 204 512 204s85.1 8.4 124.5' +
            ' 25.1c38.1 16.1 72.3 39.2 101.7 68.6 29.4 29.4 52.5 63.6' +
            ' 68.6 101.7 16.7 39.4 25.1 81.3 25.1 124.5s-8.4 85.1-25.1' +
            ' 124.5a318.64 318.64 0 0 1-68.6 101.7c-9.3 9.3-19.1 18-29.3' +
            ' 26L668.2 724a8 8 0 0 0-14.1 3l-39.6 162.2c-1.2 5 2.6 9.9 7.7' +
            ' 9.9l167 .8c6.7 0 10.5-7.7 6.3-12.9l-37.3-47.9z"></path>' +
            '</svg>';
        sliderMask.className = 'sliderMask';
        slider.className = 'slider';
        sliderIcon.className = 'sliderIcon';
        sliderIcon.innerHTML = '<svg viewBox="64 64 896 896" fill="currentColor" width="1em" ' +
            'height="1em" data-icon="arrow-right" aria-hidden="true"><path d="M869 487.8L491.2 ' +
            '159.9c-2.9-2.5-6.6-3.9-10.5-3.9h-88.5c-7.4 0-10.8 9.2-5.2 14l350.2 304H152c-4.4 0-8 ' +
            '3.6-8 8v60c0 4.4 3.6 8 8 8h585.1L386.9 854c-5.6 4.9-2.2 14 5.2 14h91.5c1.9 0 3.8-.7 ' +
            '5.2-2L869 536.2a32.07 32.07 0 0 0 0-48.4z"></path></svg>';
        text.innerHTML = '<svg viewBox="0 0 300 40">' +
            '  <linearGradient id="gr-radial"  x1="0%" y1="0%" x2="100%" y2="0%">' +
            '      <stop stop-color="#333" offset="0%"/>' +
            '      <stop stop-opacity="0.1" offset="50%">' +
            '          <animate attributeName="offset" from="0" to="1.3"' +
            '           dur="3s" repeatCount="indefinite" />' +
            '      </stop>' +
            '      <stop stop-color="#333" offset="100%"/>' +
            '  </linearGradient>' +
            '  <text text-anchor="middle" x="50%" y="50%" dy="5px"' +
            '  style="font-size:12pt; fill: url(#gr-radial)">向右滑动滑块填充拼图</text>' +
            '</svg>';
        text.className = 'sliderText';
        const el = this.root;
        el.appendChild(canvas);
        el.appendChild(refreshIcon);
        el.appendChild(block);
        slider.appendChild(sliderIcon);
        sliderMask.appendChild(slider);
        sliderContainer.appendChild(sliderMask);
        sliderContainer.appendChild(text);
        el.appendChild(sliderContainer);
        Object.assign(this, {
            canvas,
            block,
            sliderContainer,
            refreshIcon,
            slider,
            sliderMask,
            sliderIcon,
            text,
            canvasCtx: canvas.getContext('2d'),
            blockCtx: block.getContext('2d')
        });
    }
    initImg() {
        const img = createImg(() => {
            this.canvasCtx.drawImage(img, 0, 0, this.sideWidth, this.sideHeight);
            this.blockCtx.drawImage(img, 0, 0, this.sideWidth, this.sideHeight);
            const y = this.yPos - this.sideRadius * 2 + 2;
            const imageData = this.blockCtx.getImageData(this.xPos, y, this.reallyLength, this.reallyLength);
            this.block.width = this.reallyLength;
            this.blockCtx.putImageData(imageData, 0, y);
        });
        this.img = img;
    }
    drawPic() {
        // 随机创建滑块的位置
        this.xPos = getRandomNumberByRange(this.reallyLength + 10, this.sideWidth - (this.reallyLength + 10));
        this.yPos = getRandomNumberByRange(10 + this.sideRadius * 2, this.sideHeight - (this.reallyLength + 10));
        this.draw(this.canvasCtx, 'fill', this.xPos, this.yPos);
        this.draw(this.blockCtx, 'clip', this.xPos, this.yPos);
    }
    clean() {
        this.canvasCtx.clearRect(0, 0, this.sideWidth, this.sideHeight);
        this.blockCtx.clearRect(0, 0, this.sideWidth, this.sideHeight);
        this.block.width = this.sideWidth;
    }
    bindEvents() {
        this.root.onselectstart = () => false;
        this.refreshIcon.onclick = () => {
            this.reset();
        };
        let originX, originY, isMouseDown = false;
        const trail = [];
        this.slider.addEventListener('mousedown', function (e) {
            originX = e.x;
            originY = e.y;
            isMouseDown = true;
        });
        document.addEventListener('mousemove', (e) => {
            if (!isMouseDown) {
                return false;
            }
            const moveX = e.x - originX;
            const moveY = e.y - originY;
            if (moveX < 0 || moveX + 38 >= this.sideWidth) {
                return false;
            }
            this.slider.style.left = moveX + 'px';
            const blockLeft = (this.sideWidth - 40 - 20) / (this.sideWidth - 40) * moveX;
            this.block.style.left = blockLeft + 'px';
            if (moveX) {
                addClass(this.sliderContainer, 'sliderContainer_active');
            }
            else {
                removeClass(this.sliderContainer, 'sliderContainer_active');
            }
            this.sliderMask.style.width = (moveX ? (moveX + 15) : moveX) + 'px';
            trail.push(moveY);
        });
        //
        document.addEventListener('mouseup', (e) => {
            if (!isMouseDown) {
                return false;
            }
            isMouseDown = false;
            if (e.x === originX) {
                return false;
            }
            removeClass(this.sliderContainer, 'sliderContainer_active');
            this.trail = trail;
            const { spliced, TuringTest } = this.verify();
            if (spliced) {
                if (TuringTest) {
                    addClass(this.sliderContainer, 'sliderContainer_success');
                    this.success();
                }
                else {
                    addClass(this.sliderContainer, 'sliderContainer_fail');
                    this.text.innerHTML = '再试一次';
                    this.reset();
                }
            }
            else {
                if (e.x - originX > 0) {
                    addClass(this.sliderContainer, 'sliderContainer_fail');
                    this.fail();
                    setTimeout(() => {
                        this.reset();
                    }, 1000);
                }
            }
        });
    }
    verify() {
        const arr = this.trail; // 拖动时y轴的移动距离
        const average = arr.reduce(sum) / arr.length; // 平均值
        const deviations = arr.map(x => x - average); // 偏差数组
        const stddev = Math.sqrt(deviations.map(square).reduce(sum) / arr.length); // 标准差
        const left = parseInt(this.block.style.left);
        return {
            spliced: Math.abs(left - this.xPos) < 10,
            TuringTest: average !== stddev, // 只是简单的验证拖动轨迹，相等时一般为0，表示可能非人为操作
        };
    }
    reset() {
        this.sliderContainer.className = 'sliderContainer';
        this.slider.style.left = 0;
        this.block.style.left = 0;
        this.sliderMask.style.width = 0;
        this.clean();
        this.img.src = getRandomImg();
        this.drawPic();
    }
    success() {
        this.submit.emit(true);
        setTimeout(() => this.reset(), 1000);
    }
    fail() {
        this.submit.emit(false);
    }
}
VerifyComponent.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "15.0.1", ngImport: i0, type: VerifyComponent, deps: [], target: i0.ɵɵFactoryTarget.Component });
VerifyComponent.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "14.0.0", version: "15.0.1", type: VerifyComponent, selector: "pz-verify", outputs: { submit: "submit" }, ngImport: i0, template: "<div id=\"verify\"></div>\n", styles: ["::ng-deep #verify{position:relative;width:300px}::ng-deep #verify canvas:first-child{border-radius:8px;background:rgba(255,255,255,.2)}::ng-deep #verify .block{position:absolute;left:0;top:0}::ng-deep #verify .sliderContainer{position:relative;text-align:center;width:300px;height:40px;line-height:40px;background:#f7f9fa;color:#45494c;border:1px solid #e4e7eb;border-radius:5px}::ng-deep #verify .sliderContainer_active .slider{top:-1px;height:38px}::ng-deep #verify .sliderContainer_active .sliderMask{height:38px;border-width:1px}::ng-deep #verify .sliderContainer_success .slider{height:38px;top:-1px;border:1px solid #52CCBA;background-color:#52ccba!important}::ng-deep #verify .sliderContainer_success .sliderMask{height:38px;border:1px solid #52CCBA;background-color:#d2f4ef}::ng-deep #verify .sliderContainer_success .sliderIcon{background-position:0 0!important}::ng-deep #verify .sliderContainer_fail .slider{top:-1px;height:38px;background-color:#f57a7a!important}::ng-deep #verify .sliderContainer_fail .sliderMask{height:38px;border:1px solid #f57a7a;background-color:#fce1e1}::ng-deep #verify .sliderContainer_fail .sliderIcon{background-position:0 -83px!important}::ng-deep #verify .sliderContainer_active .sliderText,::ng-deep #verify .sliderContainer_success .sliderText,::ng-deep #verify .sliderContainer_fail .sliderText{display:none}::ng-deep #verify .sliderMask{position:absolute;left:0;top:0;height:39px;border:0 solid #1991FA;background:#D1E9FE;border-radius:5px}::ng-deep #verify .slider{position:absolute;top:0;left:0;width:38px;height:38px;background:#fff;box-shadow:0 0 3px #0000004d;cursor:pointer;transition:background .2s linear;border-radius:5px}::ng-deep #verify .slider:hover{background:#1991FA}::ng-deep #verify .slider:hover .sliderIcon{color:#fff}::ng-deep #verify .sliderIcon{position:absolute;top:2px;left:12px;width:18px;height:18px}::ng-deep #verify .sliderIcon>svg{height:100%;width:100%}::ng-deep #verify .refreshIcon{color:#fff;position:absolute;right:0;top:0;width:25px;height:25px;cursor:pointer}::ng-deep #verify .refreshIcon>svg{height:90%;width:90%;transform:rotate(-180deg);opacity:.7}\n"] });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "15.0.1", ngImport: i0, type: VerifyComponent, decorators: [{
            type: Component,
            args: [{ selector: 'pz-verify', template: "<div id=\"verify\"></div>\n", styles: ["::ng-deep #verify{position:relative;width:300px}::ng-deep #verify canvas:first-child{border-radius:8px;background:rgba(255,255,255,.2)}::ng-deep #verify .block{position:absolute;left:0;top:0}::ng-deep #verify .sliderContainer{position:relative;text-align:center;width:300px;height:40px;line-height:40px;background:#f7f9fa;color:#45494c;border:1px solid #e4e7eb;border-radius:5px}::ng-deep #verify .sliderContainer_active .slider{top:-1px;height:38px}::ng-deep #verify .sliderContainer_active .sliderMask{height:38px;border-width:1px}::ng-deep #verify .sliderContainer_success .slider{height:38px;top:-1px;border:1px solid #52CCBA;background-color:#52ccba!important}::ng-deep #verify .sliderContainer_success .sliderMask{height:38px;border:1px solid #52CCBA;background-color:#d2f4ef}::ng-deep #verify .sliderContainer_success .sliderIcon{background-position:0 0!important}::ng-deep #verify .sliderContainer_fail .slider{top:-1px;height:38px;background-color:#f57a7a!important}::ng-deep #verify .sliderContainer_fail .sliderMask{height:38px;border:1px solid #f57a7a;background-color:#fce1e1}::ng-deep #verify .sliderContainer_fail .sliderIcon{background-position:0 -83px!important}::ng-deep #verify .sliderContainer_active .sliderText,::ng-deep #verify .sliderContainer_success .sliderText,::ng-deep #verify .sliderContainer_fail .sliderText{display:none}::ng-deep #verify .sliderMask{position:absolute;left:0;top:0;height:39px;border:0 solid #1991FA;background:#D1E9FE;border-radius:5px}::ng-deep #verify .slider{position:absolute;top:0;left:0;width:38px;height:38px;background:#fff;box-shadow:0 0 3px #0000004d;cursor:pointer;transition:background .2s linear;border-radius:5px}::ng-deep #verify .slider:hover{background:#1991FA}::ng-deep #verify .slider:hover .sliderIcon{color:#fff}::ng-deep #verify .sliderIcon{position:absolute;top:2px;left:12px;width:18px;height:18px}::ng-deep #verify .sliderIcon>svg{height:100%;width:100%}::ng-deep #verify .refreshIcon{color:#fff;position:absolute;right:0;top:0;width:25px;height:25px;cursor:pointer}::ng-deep #verify .refreshIcon>svg{height:90%;width:90%;transform:rotate(-180deg);opacity:.7}\n"] }]
        }], ctorParameters: function () { return []; }, propDecorators: { submit: [{
                type: Output
            }] } });
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoidmVyaWZ5LmNvbXBvbmVudC5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uLy4uL3Byb2plY3RzL2FhaS9zcmMvY29tcG9uZW50L3ZlcmlmeS92ZXJpZnkuY29tcG9uZW50LnRzIiwiLi4vLi4vLi4vLi4vLi4vcHJvamVjdHMvYWFpL3NyYy9jb21wb25lbnQvdmVyaWZ5L3ZlcmlmeS5jb21wb25lbnQuaHRtbCJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQSxPQUFPLEVBQUUsU0FBUyxFQUFFLFlBQVksRUFBVSxNQUFNLEVBQUUsTUFBTSxlQUFlLENBQUM7O0FBRXhFLFNBQVMsc0JBQXNCLENBQUMsS0FBSyxFQUFFLEdBQUc7SUFDdEMsT0FBTyxJQUFJLENBQUMsS0FBSyxDQUFDLElBQUksQ0FBQyxNQUFNLEVBQUUsR0FBRyxDQUFDLEdBQUcsR0FBRyxLQUFLLENBQUMsR0FBRyxLQUFLLENBQUMsQ0FBQztBQUM3RCxDQUFDO0FBRUQsU0FBUyxZQUFZLENBQUMsS0FBSyxFQUFFLE1BQU07SUFDL0IsTUFBTSxNQUFNLEdBQUcsYUFBYSxDQUFDLFFBQVEsQ0FBQyxDQUFDO0lBQ3ZDLE1BQU0sQ0FBQyxLQUFLLEdBQUcsS0FBSyxDQUFDO0lBQ3JCLE1BQU0sQ0FBQyxNQUFNLEdBQUcsTUFBTSxDQUFDO0lBQ3ZCLE9BQU8sTUFBTSxDQUFDO0FBQ2xCLENBQUM7QUFFRCxTQUFTLFNBQVMsQ0FBQyxNQUFNO0lBQ3JCLE1BQU0sR0FBRyxHQUFHLGFBQWEsQ0FBQyxLQUFLLENBQUMsQ0FBQztJQUNqQyxHQUFHLENBQUMsV0FBVyxHQUFHLFdBQVcsQ0FBQztJQUM5QixHQUFHLENBQUMsTUFBTSxHQUFHLE1BQU0sQ0FBQztJQUNwQixHQUFHLENBQUMsT0FBTyxHQUFHLEdBQUcsRUFBRTtRQUNmLEdBQUcsQ0FBQyxHQUFHLEdBQUcsWUFBWSxFQUFFLENBQUM7SUFDN0IsQ0FBQyxDQUFDO0lBQ0YsR0FBRyxDQUFDLEdBQUcsR0FBRyxZQUFZLEVBQUUsQ0FBQztJQUN6QixPQUFPLEdBQUcsQ0FBQztBQUNmLENBQUM7QUFFRCxTQUFTLGFBQWEsQ0FBQyxPQUFPO0lBQzFCLE9BQU8sUUFBUSxDQUFDLGFBQWEsQ0FBQyxPQUFPLENBQUMsQ0FBQztBQUMzQyxDQUFDO0FBRUQsU0FBUyxRQUFRLENBQUMsR0FBRyxFQUFFLFNBQVM7SUFDNUIsR0FBRyxDQUFDLFNBQVMsQ0FBQyxHQUFHLENBQUMsU0FBUyxDQUFDLENBQUM7QUFDakMsQ0FBQztBQUVELFNBQVMsV0FBVyxDQUFDLEdBQUcsRUFBRSxTQUFTO0lBQy9CLEdBQUcsQ0FBQyxTQUFTLENBQUMsTUFBTSxDQUFDLFNBQVMsQ0FBQyxDQUFDO0FBQ3BDLENBQUM7QUFFRCxTQUFTLFlBQVk7SUFDakIsT0FBTyx1Q0FBdUMsR0FBRyxzQkFBc0IsQ0FBQyxDQUFDLEVBQUUsR0FBRyxDQUFDLENBQUM7QUFDcEYsQ0FBQztBQUVELFNBQVMsR0FBRyxDQUFDLENBQUMsRUFBRSxDQUFDO0lBQ2IsT0FBTyxDQUFDLEdBQUcsQ0FBQyxDQUFDO0FBQ2pCLENBQUM7QUFFRCxTQUFTLE1BQU0sQ0FBQyxDQUFDO0lBQ2IsT0FBTyxDQUFDLEdBQUcsQ0FBQyxDQUFDO0FBQ2pCLENBQUM7QUFPRCxNQUFNLE9BQU8sZUFBZTtJQXdCeEI7UUF2Qk8sY0FBUyxHQUFHLEdBQUcsQ0FBQztRQUNoQixlQUFVLEdBQUcsR0FBRyxDQUFDO1FBQ2pCLGVBQVUsR0FBRyxFQUFFLENBQUM7UUFDaEIsZUFBVSxHQUFHLEVBQUUsQ0FBQztRQWtCaEIsV0FBTSxHQUEwQixJQUFJLFlBQVksRUFBVyxDQUFDO1FBRy9ELEVBQUU7SUFDTixDQUFDO0lBRU0sUUFBUTtRQUNYLElBQUksQ0FBQyxJQUFJLEVBQUUsQ0FBQztJQUNoQixDQUFDO0lBRU0sSUFBSSxDQUFDLEdBQUcsRUFBRSxTQUFTLEVBQUUsQ0FBQyxFQUFFLENBQUM7UUFDNUIsTUFBTSxDQUFDLEdBQUcsSUFBSSxDQUFDLFVBQVUsQ0FBQztRQUMxQixNQUFNLEVBQUUsR0FBRyxJQUFJLENBQUMsRUFBRSxDQUFDO1FBQ25CLE1BQU0sQ0FBQyxHQUFHLElBQUksQ0FBQyxVQUFVLENBQUM7UUFDMUIsR0FBRyxDQUFDLFNBQVMsRUFBRSxDQUFDO1FBQ2hCLEdBQUcsQ0FBQyxNQUFNLENBQUMsQ0FBQyxFQUFFLENBQUMsQ0FBQyxDQUFDO1FBQ2pCLEdBQUcsQ0FBQyxNQUFNLENBQUMsQ0FBQyxHQUFHLENBQUMsR0FBRyxDQUFDLEVBQUUsQ0FBQyxDQUFDLENBQUM7UUFDekIsR0FBRyxDQUFDLEdBQUcsQ0FBQyxDQUFDLEdBQUcsQ0FBQyxHQUFHLENBQUMsRUFBRSxDQUFDLEdBQUcsQ0FBQyxHQUFHLENBQUMsRUFBRSxDQUFDLEVBQUUsQ0FBQyxFQUFFLENBQUMsR0FBRyxFQUFFLENBQUMsQ0FBQztRQUM1QyxHQUFHLENBQUMsTUFBTSxDQUFDLENBQUMsR0FBRyxDQUFDLEdBQUcsQ0FBQyxFQUFFLENBQUMsQ0FBQyxDQUFDO1FBQ3pCLEdBQUcsQ0FBQyxNQUFNLENBQUMsQ0FBQyxHQUFHLENBQUMsRUFBRSxDQUFDLENBQUMsQ0FBQztRQUNyQixHQUFHLENBQUMsTUFBTSxDQUFDLENBQUMsR0FBRyxDQUFDLEVBQUUsQ0FBQyxHQUFHLENBQUMsR0FBRyxDQUFDLENBQUMsQ0FBQztRQUM3QixHQUFHLENBQUMsR0FBRyxDQUFDLENBQUMsR0FBRyxDQUFDLEdBQUcsQ0FBQyxHQUFHLENBQUMsRUFBRSxDQUFDLEdBQUcsQ0FBQyxHQUFHLENBQUMsRUFBRSxDQUFDLEVBQUUsQ0FBQyxFQUFFLENBQUMsR0FBRyxFQUFFLENBQUMsQ0FBQztRQUNoRCxHQUFHLENBQUMsTUFBTSxDQUFDLENBQUMsR0FBRyxDQUFDLEVBQUUsQ0FBQyxHQUFHLENBQUMsR0FBRyxDQUFDLENBQUMsQ0FBQztRQUM3QixHQUFHLENBQUMsTUFBTSxDQUFDLENBQUMsR0FBRyxDQUFDLEVBQUUsQ0FBQyxHQUFHLENBQUMsQ0FBQyxDQUFDO1FBQ3pCLEdBQUcsQ0FBQyxNQUFNLENBQUMsQ0FBQyxFQUFFLENBQUMsR0FBRyxDQUFDLENB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QUFDO0lBQ3pDLENBQUM7SUFDTSxJQUFJO1FBQ1AsSUFBSSxDQUFDLE1BQU0sQ0FBQyxJQUFJLENBQUMsS0FBSyxDQUFDLENBQUM7SUFDNUIsQ0FBQzs7NEdBM1BRLGVBQWU7Z0dBQWYsZUFBZSxnRkNyRDVCLDZCQUNBOzJGRG9EYSxlQUFlO2tCQUwzQixTQUFTOytCQUNJLFdBQVc7MEVBMEJkLE1BQU07c0JBRFosTUFBTSIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IENvbXBvbmVudCwgRXZlbnRFbWl0dGVyLCBPbkluaXQsIE91dHB1dCB9IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xuXG5mdW5jdGlvbiBnZXRSYW5kb21OdW1iZXJCeVJhbmdlKHN0YXJ0LCBlbmQpIHtcbiAgICByZXR1cm4gTWF0aC5yb3VuZChNYXRoLnJhbmRvbSgpICogKGVuZCAtIHN0YXJ0KSArIHN0YXJ0KTtcbn1cblxuZnVuY3Rpb24gY3JlYXRlQ2FudmFzKHdpZHRoLCBoZWlnaHQpIHtcbiAgICBjb25zdCBjYW52YXMgPSBjcmVhdGVFbGVtZW50KCdjYW52YXMnKTtcbiAgICBjYW52YXMud2lkdGggPSB3aWR0aDtcbiAgICBjYW52YXMuaGVpZ2h0ID0gaGVpZ2h0O1xuICAgIHJldHVybiBjYW52YXM7XG59XG5cbmZ1bmN0aW9uIGNyZWF0ZUltZyhvbmxvYWQpIHtcbiAgICBjb25zdCBpbWcgPSBjcmVhdGVFbGVtZW50KCdpbWcnKTtcbiAgICBpbWcuY3Jvc3NPcmlnaW4gPSAnQW5vbnltb3VzJztcbiAgICBpbWcub25sb2FkID0gb25sb2FkO1xuICAgIGltZy5vbmVycm9yID0gKCkgPT4ge1xuICAgICAgICBpbWcuc3JjID0gZ2V0UmFuZG9tSW1nKCk7XG4gICAgfTtcbiAgICBpbWcuc3JjID0gZ2V0UmFuZG9tSW1nKCk7XG4gICAgcmV0dXJuIGltZztcbn1cblxuZnVuY3Rpb24gY3JlYXRlRWxlbWVudCh0YWdOYW1lKSB7XG4gICAgcmV0dXJuIGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQodGFnTmFtZSk7XG59XG5cbmZ1bmN0aW9uIGFkZENsYXNzKHRhZywgY2xhc3NOYW1lKSB7XG4gICAgdGFnLmNsYXNzTGlzdC5hZGQoY2xhc3NOYW1lKTtcbn1cblxuZnVuY3Rpb24gcmVtb3ZlQ2xhc3ModGFnLCBjbGFzc05hbWUpIHtcbiAgICB0YWcuY2xhc3NMaXN0LnJlbW92ZShjbGFzc05hbWUpO1xufVxuXG5mdW5jdGlvbiBnZXRSYW5kb21JbWcoKSB7XG4gICAgcmV0dXJuICdodHRwczovL3BpY3N1bS5waG90b3MvMzAwLzE1MC8/aW1hZ2U9JyArIGdldFJhbmRvbU51bWJlckJ5UmFuZ2UoMCwgMTAwKTtcbn1cblxuZnVuY3Rpb24gc3VtKHgsIHkpIHtcbiAgICByZXR1cm4geCArIHk7XG59XG5cbmZ1bmN0aW9uIHNxdWFyZSh4KSB7XG4gICAgcmV0dXJuIHggKiB4O1xufVxuXG5AQ29tcG9uZW50KHtcbiAgICBzZWxlY3RvcjogJ3B6LXZlcmlmeScsXG4gICAgdGVtcGxhdGVVcmw6ICcuL3ZlcmlmeS5jb21wb25lbnQuaHRtbCcsXG4gICAgc3R5bGVVcmxzOiBbJy4vdmVyaWZ5LmNvbXBvbmVudC5zY3NzJ11cbn0pXG5leHBvcnQgY2xhc3MgVmVyaWZ5Q29tcG9uZW50IGltcGxlbWVudHMgT25Jbml0IHtcbiAgICBwdWJsaWMgc2lkZVdpZHRoID0gMzAwO1xuICAgIHB1YmxpYyBzaWRlSGVpZ2h0ID0gMTUwO1xuICAgIHB1YmxpYyBzaWRlUmFkaXVzID0gMTA7XG4gICAgcHVibGljIHNpZGVMZW5ndGggPSA0MjtcbiAgICBwdWJsaWMgcmVhbGx5TGVuZ3RoOiBudW1iZXI7XG4gICAgcHVibGljIGNhbnZhczogYW55O1xuICAgIHB1YmxpYyBibG9jazogYW55O1xuICAgIHB1YmxpYyBzbGlkZXJDb250YWluZXI6IGFueTtcbiAgICBwdWJsaWMgcmVmcmVzaEljb246IGFueTtcbiAgICBwdWJsaWMgc2xpZGVyOiBhbnk7XG4gICAgcHVibGljIHNsaWRlck1hc2s6IGFueTtcbiAgICBwdWJsaWMgc2xpZGVySWNvbjogYW55O1xuICAgIHB1YmxpYyB0ZXh0OiBhbnk7XG4gICAgcHVibGljIGNhbnZhc0N0eDogYW55O1xuICAgIHB1YmxpYyBibG9ja0N0eDogYW55O1xuICAgIHB1YmxpYyB4UG9zOiBudW1iZXI7XG4gICAgcHVibGljIHlQb3M6IG51bWJlcjtcbiAgICBwdWJsaWMgaW1nOiBhbnk7XG4gICAgcHVibGljIHJvb3Q6IGFueTtcbiAgICBwdWJsaWMgdHJhaWw6IGFueTsgLy8g56e75Yqo6Led56a7XG4gICAgQE91dHB1dCgpXG4gICAgcHVibGljIHN1Ym1pdDogRXZlbnRFbWl0dGVyPGJvb2xlYW4+ID0gbmV3IEV2ZW50RW1pdHRlcjxib29sZWFuPigpO1xuXG4gICAgcHVibGljIGNvbnN0cnVjdG9yKCkge1xuICAgICAgICAvL1xuICAgIH1cblxuICAgIHB1YmxpYyBuZ09uSW5pdCgpIHtcbiAgICAgICAgdGhpcy5pbml0KCk7XG4gICAgfVxuXG4gICAgcHVibGljIGRyYXcoY3R4LCBvcGVyYXRpb24sIHgsIHkpIHtcbiAgICAgICAgY29uc3QgbCA9IHRoaXMuc2lkZUxlbmd0aDtcbiAgICAgICAgY29uc3QgUEkgPSBNYXRoLlBJO1xuICAgICAgICBjb25zdCByID0gdGhpcy5zaWRlUmFkaXVzO1xuICAgICAgICBjdHguYmVnaW5QYXRoKCk7XG4gICAgICAgIGN0eC5tb3ZlVG8oeCwgeSk7XG4gICAgICAgIGN0eC5saW5lVG8oeCArIGwgLyAyLCB5KTtcbiAgICAgICAgY3R4LmFyYyh4ICsgbCAvIDIsIHkgLSByICsgMiwgciwgMCwgMiAqIFBJKTtcbiAgICAgICAgY3R4LmxpbmVUbyh4ICsgbCAvIDIsIHkpO1xuICAgICAgICBjdHgubGluZVRvKHggKyBsLCB5KTtcbiAgICAgICAgY3R4LmxpbmVUbyh4ICsgbCwgeSArIGwgLyAyKTtcbiAgICAgICAgY3R4LmFyYyh4ICsgbCArIHIgLSAyLCB5ICsgbCAvIDIsIHIsIDAsIDIgKiBQSSk7XG4gICAgICAgIGN0eC5saW5lVG8oeCArIGwsIHkgKyBsIC8gMik7XG4gICAgICAgIGN0eC5saW5lVG8oeCArIGwsIHkgKyBsKTtcbiAgICAgICAgY3R4LmxpbmVUbyh4LCB5ICsgbCk7XG4gICAgICAgIGN0eC5saW5lVG8oeCwgeSk7XG4gICAgICAgIGN0eC5maWxsU3R5bGUgPSAnI2ZmZic7XG4gICAgICAgIGN0eFtvcGVyYXRpb25dKCk7XG4gICAgICAgIGN0eC5iZWdpblBhdGgoKTtcbiAgICAgICAgY3R4LmFyYyh4LCB5ICsgbCAvIDIsIHIsIDEuNSAqIFBJLCAwLjUgKiBQSSk7XG4gICAgICAgIGN0eC5nbG9iYWxDb21wb3NpdGVPcGVyYXRpb24gPSAneG9yJztcbiAgICAgICAgY3R4LmZpbGwoKTtcbiAgICB9XG5cbiAgICBwdWJsaWMgaW5pdCgpIHtcbiAgICAgICAgdGhpcy5yZWFsbHlMZW5ndGggPSB0aGlzLnNpZGVMZW5ndGggKyB0aGlzLnNpZGVSYWRpdXMgKiAyO1xuICAgICAgICB0aGlzLnJvb3QgPSBkb2N1bWVudC5nZXRFbGVtZW50QnlJZCgndmVyaWZ5Jyk7XG4gICAgICAgIHRoaXMuaW5pdERPTSgpO1xuICAgICAgICB0aGlzLmluaXRJbWcoKTtcbiAgICAgICAgdGhpcy5kcmF3UGljKCk7XG4gICAgICAgIHRoaXMuYmluZEV2ZW50cygpO1xuICAgIH1cblxuICAgIHB1YmxpYyBpbml0RE9NKCkge1xuICAgICAgICBjb25zdCBjYW52YXMgPSBjcmVhdGVDYW52YXModGhpcy5zaWRlV2lkdGgsIHRoaXMuc2lkZUhlaWdodCk7IC8vIOeUu+W4g1xuICAgICAgICBjb25zdCBibG9jayA9IGNhbnZhcy5jbG9uZU5vZGUodHJ1ZSk7IC8vIOa7keWdl1xuICAgICAgICBjb25zdCBzbGlkZXJDb250YWluZXIgPSBjcmVhdGVFbGVtZW50KCdkaXYnKTtcbiAgICAgICAgY29uc3QgcmVmcmVzaEljb24gPSBjcmVhdGVFbGVtZW50KCdkaXYnKTtcbiAgICAgICAgY29uc3Qgc2xpZGVyTWFzayA9IGNyZWF0ZUVsZW1lbnQoJ2RpdicpO1xuICAgICAgICBjb25zdCBzbGlkZXIgPSBjcmVhdGVFbGVtZW50KCdkaXYnKTtcbiAgICAgICAgY29uc3Qgc2xpZGVySWNvbiA9IGNyZWF0ZUVsZW1lbnQoJ3NwYW4nKTtcbiAgICAgICAgY29uc3QgdGV4dCA9IGNyZWF0ZUVsZW1lbnQoJ3NwYW4nKTtcblxuICAgICAgICBibG9jay5jbGFzc05hbWUgPSAnYmxvY2snO1xuICAgICAgICBzbGlkZXJDb250YWluZXIuY2xhc3NOYW1lID0gJ3NsaWRlckNvbnRhaW5lcic7XG4gICAgICAgIHJlZnJlc2hJY29uLmNsYXNzTmFtZSA9ICdyZWZyZXNoSWNvbic7XG4gICAgICAgIHJlZnJlc2hJY29uLmlubmVySFRNTCA9ICc8c3ZnIHZpZXdCb3g9XCI2NCA2NCA4OTYgODk2XCIgZmlsbD1cImN1cnJlbnRDb2xvclwiXFwgJyArXG4gICAgICAgICAgICAnd2lkdGg9XCIxZW1cIiBoZWlnaHQ9XCIxZW1cIiBkYXRhLWljb249XCJyZWRvXCIgYXJpYS1oaWRkZW49XCJ0cnVlXCI+JyArXG4gICAgICAgICAgICAnPHBhdGggZD1cIk03NTguMiA4MzkuMUM4NTEuOCA3NjUuOSA5MTIgNjUxLjkgOTEyIDUyMy45IDkxMiAzMDMgNzMzLjUnICtcbiAgICAgICAgICAgICcgMTI0LjMgNTEyLjYgMTI0IDI5MS40IDEyMy43IDExMiAzMDIuOCAxMTIgNTIzLjljMCAxMjUuMiA1Ny41IDIzNi45JyArXG4gICAgICAgICAgICAnIDE0Ny42IDMxMC4yIDMuNSAyLjggOC42IDIuMiAxMS40LTEuM2wzOS40LTUwLjVjMi43LTMuNCcgK1xuICAgICAgICAgICAgJyAyLjEtOC4zLTEuMi0xMS4xLTguMS02LjYtMTUuOS0xMy43LTIzLjQtMjEuMmEzMTguNjQgMzE4LjY0JyArXG4gICAgICAgICAgICAnIDAgMCAxLTY4LjYtMTAxLjdDMjAwLjQgNjA5IDE5MiA1NjcuMSAxOTIgNTIzLjlzOC40LTg1LjEnICtcbiAgICAgICAgICAgICcgMjUuMS0xMjQuNWMxNi4xLTM4LjEgMzkuMi03Mi4zIDY4LjYtMTAxLjcgMjkuNC0yOS40IDYzLjYtNTIuNScgK1xuICAgICAgICAgICAgJyAxMDEuNy02OC42QzQyNi45IDIxMi40IDQ2OC44IDIwNCA1MTIgMjA0czg1LjEgOC40IDEyNC41JyArXG4gICAgICAgICAgICAnIDI1LjFjMzguMSAxNi4xIDcyLjMgMzkuMiAxMDEuNyA2OC42IDI5LjQgMjkuNCA1Mi41IDYzLjYnICtcbiAgICAgICAgICAgICcgNjguNiAxMDEuNyAxNi43IDM5LjQgMjUuMSA4MS4zIDI1LjEgMTI0LjVzLTguNCA4NS4xLTI1LjEnICtcbiAgICAgICAgICAgICcgMTI0LjVhMzE4LjY0IDMxOC42NCAwIDAgMS02OC42IDEwMS43Yy05LjMgOS4zLTE5LjEgMTgtMjkuMycgK1xuICAgICAgICAgICAgJyAyNkw2NjguMiA3MjRhOCA4IDAgMCAwLTE0LjEgM2wtMzkuNiAxNjIuMmMtMS4yIDUgMi42IDkuOSA3LjcnICtcbiAgICAgICAgICAgICcgOS45bDE2NyAuOGM2LjcgMCAxMC41LTcuNyA2LjMtMTIuOWwtMzcuMy00Ny45elwiPjwvcGF0aD4nICtcbiAgICAgICAgICAgICc8L3N2Zz4nO1xuICAgICAgICBzbGlkZXJNYXNrLmNsYXNzTmFtZSA9ICdzbGlkZXJNYXNrJztcbiAgICAgICAgc2xpZGVyLmNsYXNzTmFtZSA9ICdzbGlkZXInO1xuICAgICAgICBzbGlkZXJJY29uLmNsYXNzTmFtZSA9ICdzbGlkZXJJY29uJztcbiAgICAgICAgc2xpZGVySWNvbi5pbm5lckhUTUwgPSAnPHN2ZyB2aWV3Qm94PVwiNjQgNjQgODk2IDg5NlwiIGZpbGw9XCJjdXJyZW50Q29sb3JcIiB3aWR0aD1cIjFlbVwiICcgK1xuICAgICAgICAgICAgJ2hlaWdodD1cIjFlbVwiIGRhdGEtaWNvbj1cImFycm93LXJpZ2h0XCIgYXJpYS1oaWRkZW49XCJ0cnVlXCI+PHBhdGggZD1cIk04NjkgNDg3LjhMNDkxLjIgJyArXG4gICAgICAgICAgICAnMTU5LjljLTIuOS0yLjUtNi42LTMuOS0xMC41LTMuOWgtODguNWMtNy40IDAtMTAuOCA5LjItNS4yIDE0bDM1MC4yIDMwNEgxNTJjLTQuNCAwLTggJyArXG4gICAgICAgICAgICAnMy42LTggOHY2MGMwIDQuNCAzLjYgOCA4IDhoNTg1LjFMMzg2LjkgODU0Yy01LjYgNC45LTIuMiAxNCA1LjIgMTRoOTEuNWMxLjkgMCAzLjgtLjcgJyArXG4gICAgICAgICAgICAnNS4yLTJMODY5IDUzNi4yYTMyLjA3IDMyLjA3IDAgMCAwIDAtNDguNHpcIj48L3BhdGg+PC9zdmc+J1xuICAgICAgICB0ZXh0LmlubmVySFRNTCA9ICc8c3ZnIHZpZXdCb3g9XCIwIDAgMzAwIDQwXCI+JyArXG4gICAgICAgICAgICAnICA8bGluZWFyR3JhZGllbnQgaWQ9XCJnci1yYWRpYWxcIiAgeDE9XCIwJVwiIHkxPVwiMCVcIiB4Mj1cIjEwMCVcIiB5Mj1cIjAlXCI+JyArXG4gICAgICAgICAgICAnICAgICAgPHN0b3Agc3RvcC1jb2xvcj1cIiMzMzNcIiBvZmZzZXQ9XCIwJVwiLz4nICtcbiAgICAgICAgICAgICcgICAgICA8c3RvcCBzdG9wLW9wYWNpdHk9XCIwLjFcIiBvZmZzZXQ9XCI1MCVcIj4nICtcbiAgICAgICAgICAgICcgICAgICAgICAgPGFuaW1hdGUgYXR0cmlidXRlTmFtZT1cIm9mZnNldFwiIGZyb209XCIwXCIgdG89XCIxLjNcIicgK1xuICAgICAgICAgICAgJyAgICAgICAgICAgZHVyPVwiM3NcIiByZXBlYXRDb3VudD1cImluZGVmaW5pdGVcIiAvPicgK1xuICAgICAgICAgICAgJyAgICAgIDwvc3RvcD4nICtcbiAgICAgICAgICAgICcgICAgICA8c3RvcCBzdG9wLWNvbG9yPVwiIzMzM1wiIG9mZnNldD1cIjEwMCVcIi8+JyArXG4gICAgICAgICAgICAnICA8L2xpbmVhckdyYWRpZW50PicgK1xuICAgICAgICAgICAgJyAgPHRleHQgdGV4dC1hbmNob3I9XCJtaWRkbGVcIiB4PVwiNTAlXCIgeT1cIjUwJVwiIGR5PVwiNXB4XCInICtcbiAgICAgICAgICAgICcgIHN0eWxlPVwiZm9udC1zaXplOjEycHQ7IGZpbGw6IHVybCgjZ3ItcmFkaWFsKVwiPuWQkeWPs+a7keWKqOa7keWdl+Whq+WFheaLvOWbvjwvdGV4dD4nICtcbiAgICAgICAgICAgICc8L3N2Zz4nO1xuICAgICAgICB0ZXh0LmNsYXNzTmFtZSA9ICdzbGlkZXJUZXh0JztcblxuICAgICAgICBjb25zdCBlbCA9IHRoaXMucm9vdDtcbiAgICAgICAgZWwuYXBwZW5kQ2hpbGQoY2FudmFzKTtcbiAgICAgICAgZWwuYXBwZW5kQ2hpbGQocmVmcmVzaEljb24pO1xuICAgICAgICBlbC5hcHBlbmRDaGlsZChibG9jayk7XG4gICAgICAgIHNsaWRlci5hcHBlbmRDaGlsZChzbGlkZXJJY29uKTtcbiAgICAgICAgc2xpZGVyTWFzay5hcHBlbmRDaGlsZChzbGlkZXIpO1xuICAgICAgICBzbGlkZXJDb250YWluZXIuYXBwZW5kQ2hpbGQoc2xpZGVyTWFzayk7XG4gICAgICAgIHNsaWRlckNvbnRhaW5lci5hcHBlbmRDaGlsZCh0ZXh0KTtcbiAgICAgICAgZWwuYXBwZW5kQ2hpbGQoc2xpZGVyQ29udGFpbmVyKTtcblxuICAgICAgICBPYmplY3QuYXNzaWduKHRoaXMsIHtcbiAgICAgICAgICAgIGNhbnZhcyxcbiAgICAgICAgICAgIGJsb2NrLFxuICAgICAgICAgICAgc2xpZGVyQ29udGFpbmVyLFxuICAgICAgICAgICAgcmVmcmVzaEljb24sXG4gICAgICAgICAgICBzbGlkZXIsXG4gICAgICAgICAgICBzbGlkZXJNYXNrLFxuICAgICAgICAgICAgc2xpZGVySWNvbixcbiAgICAgICAgICAgIHRleHQsXG4gICAgICAgICAgICBjYW52YXNDdHg6IGNhbnZhcy5nZXRDb250ZXh0KCcyZCcpLFxuICAgICAgICAgICAgYmxvY2tDdHg6IGJsb2NrLmdldENvbnRleHQoJzJkJylcbiAgICAgICAgfSk7XG4gICAgfVxuXG4gICAgcHVibGljIGluaXRJbWcoKSB7XG4gICAgICAgIGNvbnN0IGltZyA9IGNyZWF0ZUltZygoKSA9PiB7XG4gICAgICAgICAgICB0aGlzLmNhbnZhc0N0eC5kcmF3SW1hZ2UoaW1nLCAwLCAwLCB0aGlzLnNpZGVXaWR0aCwgdGhpcy5zaWRlSGVpZ2h0KTtcbiAgICAgICAgICAgIHRoaXMuYmxvY2tDdHguZHJhd0ltYWdlKGltZywgMCwgMCwgdGhpcy5zaWRlV2lkdGgsIHRoaXMuc2lkZUhlaWdodCk7XG4gICAgICAgICAgICBjb25zdCB5ID0gdGhpcy55UG9zIC0gdGhpcy5zaWRlUmFkaXVzICogMiArIDI7XG4gICAgICAgICAgICBjb25zdCBpbWFnZURhdGEgPSB0aGlzLmJsb2NrQ3R4LmdldEltYWdlRGF0YSh0aGlzLnhQb3MsIHksIHRoaXMucmVhbGx5TGVuZ3RoLCB0aGlzLnJlYWxseUxlbmd0aCk7XG4gICAgICAgICAgICB0aGlzLmJsb2NrLndpZHRoID0gdGhpcy5yZWFsbHlMZW5ndGg7XG4gICAgICAgICAgICB0aGlzLmJsb2NrQ3R4LnB1dEltYWdlRGF0YShpbWFnZURhdGEsIDAsIHkpO1xuICAgICAgICB9KTtcbiAgICAgICAgdGhpcy5pbWcgPSBpbWc7XG4gICAgfVxuXG4gICAgcHVibGljIGRyYXdQaWMoKSB7XG4gICAgICAgIC8vIOmaj+acuuWIm+W7uua7keWdl+eahOS9jee9rlxuICAgICAgICB0aGlzLnhQb3MgPSBnZXRSYW5kb21OdW1iZXJCeVJhbmdlKHRoaXMucmVhbGx5TGVuZ3RoICsgMTAsIHRoaXMuc2lkZVdpZHRoIC0gKHRoaXMucmVhbGx5TGVuZ3RoICsgMTApKTtcbiAgICAgICAgdGhpcy55UG9zID0gZ2V0UmFuZG9tTnVtYmVyQnlSYW5nZSgxMCArIHRoaXMuc2lkZVJhZGl1cyAqIDIsIHRoaXMuc2lkZUhlaWdodCAtICh0aGlzLnJlYWxseUxlbmd0aCArIDEwKSk7XG4gICAgICAgIHRoaXMuZHJhdyh0aGlzLmNhbnZhc0N0eCwgJ2ZpbGwnLCB0aGlzLnhQb3MsIHRoaXMueVBvcyk7XG4gICAgICAgIHRoaXMuZHJhdyh0aGlzLmJsb2NrQ3R4LCAnY2xpcCcsIHRoaXMueFBvcywgdGhpcy55UG9zKTtcbiAgICB9XG5cbiAgICBwdWJsaWMgY2xlYW4oKSB7XG4gICAgICAgIHRoaXMuY2FudmFzQ3R4LmNsZWFyUmVjdCgwLCAwLCB0aGlzLnNpZGVXaWR0aCwgdGhpcy5zaWRlSGVpZ2h0KTtcbiAgICAgICAgdGhpcy5ibG9ja0N0eC5jbGVhclJlY3QoMCwgMCwgdGhpcy5zaWRlV2lkdGgsIHRoaXMuc2lkZUhlaWdodCk7XG4gICAgICAgIHRoaXMuYmxvY2sud2lkdGggPSB0aGlzLnNpZGVXaWR0aDtcbiAgICB9XG5cbiAgICBwdWJsaWMgYmluZEV2ZW50cygpIHtcbiAgICAgICAgdGhpcy5yb290Lm9uc2VsZWN0c3RhcnQgPSAoKSA9PiBmYWxzZTtcbiAgICAgICAgdGhpcy5yZWZyZXNoSWNvbi5vbmNsaWNrID0gKCkgPT4ge1xuICAgICAgICAgICAgdGhpcy5yZXNldCgpO1xuICAgICAgICB9O1xuXG4gICAgICAgIGxldCBvcmlnaW5YLCBvcmlnaW5ZLCBpc01vdXNlRG93biA9IGZhbHNlO1xuICAgICAgICBjb25zdCB0cmFpbCA9IFtdO1xuICAgICAgICB0aGlzLnNsaWRlci5hZGRFdmVudExpc3RlbmVyKCdtb3VzZWRvd24nLCBmdW5jdGlvbiAoZSkge1xuICAgICAgICAgICAgb3JpZ2luWCA9IGUueDtcbiAgICAgICAgICAgIG9yaWdpblkgPSBlLnk7XG4gICAgICAgICAgICBpc01vdXNlRG93biA9IHRydWU7XG4gICAgICAgIH0pO1xuICAgICAgICBkb2N1bWVudC5hZGRFdmVudExpc3RlbmVyKCdtb3VzZW1vdmUnLCAoZSkgPT4ge1xuICAgICAgICAgICAgaWYgKCFpc01vdXNlRG93bikgeyByZXR1cm4gZmFsc2U7IH1cbiAgICAgICAgICAgIGNvbnN0IG1vdmVYID0gZS54IC0gb3JpZ2luWDtcbiAgICAgICAgICAgIGNvbnN0IG1vdmVZID0gZS55IC0gb3JpZ2luWTtcbiAgICAgICAgICAgIGlmIChtb3ZlWCA8IDAgfHwgbW92ZVggKyAzOCA+PSB0aGlzLnNpZGVXaWR0aCkgeyByZXR1cm4gZmFsc2U7IH1cbiAgICAgICAgICAgIHRoaXMuc2xpZGVyLnN0eWxlLmxlZnQgPSBtb3ZlWCArICdweCc7XG4gICAgICAgICAgICBjb25zdCBibG9ja0xlZnQgPSAodGhpcy5zaWRlV2lkdGggLSA0MCAtIDIwKSAvICh0aGlzLnNpZGVXaWR0aCAtIDQwKSAqIG1vdmVYO1xuICAgICAgICAgICAgdGhpcy5ibG9jay5zdHlsZS5sZWZ0ID0gYmxvY2tMZWZ0ICsgJ3B4JztcbiAgICAgICAgICAgIGlmIChtb3ZlWCkge1xuICAgICAgICAgICAgICAgIGFkZENsYXNzKHRoaXMuc2xpZGVyQ29udGFpbmVyLCAnc2xpZGVyQ29udGFpbmVyX2FjdGl2ZScpO1xuICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICByZW1vdmVDbGFzcyh0aGlzLnNsaWRlckNvbnRhaW5lciwgJ3NsaWRlckNvbnRhaW5lcl9hY3RpdmUnKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHRoaXMuc2xpZGVyTWFzay5zdHlsZS53aWR0aCA9ICggbW92ZVggPyAoIG1vdmVYICsgMTUgKSA6IG1vdmVYICkgKyAncHgnO1xuICAgICAgICAgICAgdHJhaWwucHVzaChtb3ZlWSk7XG4gICAgICAgIH0pO1xuICAgICAgICAvL1xuICAgICAgICBkb2N1bWVudC5hZGRFdmVudExpc3RlbmVyKCdtb3VzZXVwJywgKGUpID0+IHtcbiAgICAgICAgICAgIGlmICghaXNNb3VzZURvd24pIHsgcmV0dXJuIGZhbHNlOyB9XG4gICAgICAgICAgICBpc01vdXNlRG93biA9IGZhbHNlO1xuICAgICAgICAgICAgaWYgKGUueCA9PT0gb3JpZ2luWCkgeyByZXR1cm4gZmFsc2U7IH1cbiAgICAgICAgICAgIHJlbW92ZUNsYXNzKHRoaXMuc2xpZGVyQ29udGFpbmVyLCAnc2xpZGVyQ29udGFpbmVyX2FjdGl2ZScpO1xuICAgICAgICAgICAgdGhpcy50cmFpbCA9IHRyYWlsO1xuICAgICAgICAgICAgY29uc3Qge3NwbGljZWQsIFR1cmluZ1Rlc3R9ID0gdGhpcy52ZXJpZnkoKTtcbiAgICAgICAgICAgIGlmIChzcGxpY2VkKSB7XG4gICAgICAgICAgICAgICAgaWYgKFR1cmluZ1Rlc3QpIHtcbiAgICAgICAgICAgICAgICAgICAgYWRkQ2xhc3ModGhpcy5zbGlkZXJDb250YWluZXIsICdzbGlkZXJDb250YWluZXJfc3VjY2VzcycpO1xuICAgICAgICAgICAgICAgICAgICB0aGlzLnN1Y2Nlc3MoKTtcbiAgICAgICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICBhZGRDbGFzcyh0aGlzLnNsaWRlckNvbnRhaW5lciwgJ3NsaWRlckNvbnRhaW5lcl9mYWlsJyk7XG4gICAgICAgICAgICAgICAgICAgIHRoaXMudGV4dC5pbm5lckhUTUwgPSAn5YaN6K+V5LiA5qyhJztcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5yZXNldCgpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgaWYgKGUueCAtIG9yaWdpblggPiAwKSB7XG4gICAgICAgICAgICAgICAgICAgIGFkZENsYXNzKHRoaXMuc2xpZGVyQ29udGFpbmVyLCAnc2xpZGVyQ29udGFpbmVyX2ZhaWwnKTtcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5mYWlsKCk7XG4gICAgICAgICAgICAgICAgICAgIHNldFRpbWVvdXQoKCkgPT4ge1xuICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5yZXNldCgpO1xuICAgICAgICAgICAgICAgICAgICB9LCAxMDAwKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgIH0pO1xuICAgIH1cblxuICAgIHB1YmxpYyB2ZXJpZnkoKSB7XG4gICAgICAgIGNvbnN0IGFyciA9IHRoaXMudHJhaWw7IC8vIOaLluWKqOaXtnnovbTnmoTnp7vliqjot53nprtcbiAgICAgICAgY29uc3QgYXZlcmFnZSA9IGFyci5yZWR1Y2Uoc3VtKSAvIGFyci5sZW5ndGg7IC8vIOW5s+Wdh+WAvFxuICAgICAgICBjb25zdCBkZXZpYXRpb25zID0gYXJyLm1hcCh4ID0+IHggLSBhdmVyYWdlKTsgLy8g5YGP5beu5pWw57uEXG4gICAgICAgIGNvbnN0IHN0ZGRldiA9IE1hdGguc3FydChkZXZpYXRpb25zLm1hcChzcXVhcmUpLnJlZHVjZShzdW0pIC8gYXJyLmxlbmd0aCk7IC8vIOagh+WHhuW3rlxuICAgICAgICBjb25zdCBsZWZ0ID0gcGFyc2VJbnQodGhpcy5ibG9jay5zdHlsZS5sZWZ0KTtcbiAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICAgIHNwbGljZWQ6IE1hdGguYWJzKGxlZnQgLSB0aGlzLnhQb3MgKSA8IDEwLFxuICAgICAgICAgICAgVHVyaW5nVGVzdDogYXZlcmFnZSAhPT0gc3RkZGV2LCAvLyDlj6rmmK/nroDljZXnmoTpqozor4Hmi5bliqjovajov7nvvIznm7jnrYnml7bkuIDoiKzkuLow77yM6KGo56S65Y+v6IO96Z2e5Lq65Li65pON5L2cXG4gICAgICAgIH07XG4gICAgfVxuXG4gICAgcHVibGljIHJlc2V0KCkge1xuICAgICAgICB0aGlzLnNsaWRlckNvbnRhaW5lci5jbGFzc05hbWUgPSAnc2xpZGVyQ29udGFpbmVyJztcbiAgICAgICAgdGhpcy5zbGlkZXIuc3R5bGUubGVmdCA9IDA7XG4gICAgICAgIHRoaXMuYmxvY2suc3R5bGUubGVmdCA9IDA7XG4gICAgICAgIHRoaXMuc2xpZGVyTWFzay5zdHlsZS53aWR0aCA9IDA7XG4gICAgICAgIHRoaXMuY2xlYW4oKTtcbiAgICAgICAgdGhpcy5pbWcuc3JjID0gZ2V0UmFuZG9tSW1nKCk7XG4gICAgICAgIHRoaXMuZHJhd1BpYygpO1xuICAgIH1cblxuICAgIHB1YmxpYyBzdWNjZXNzKCkge1xuICAgICAgICB0aGlzLnN1Ym1pdC5lbWl0KHRydWUpO1xuICAgICAgICBzZXRUaW1lb3V0KCgpID0+IHRoaXMucmVzZXQoKSwgMTAwMCk7XG4gICAgfVxuICAgIHB1YmxpYyBmYWlsKCkge1xuICAgICAgICB0aGlzLnN1Ym1pdC5lbWl0KGZhbHNlKTtcbiAgICB9XG59XG4iLCI8ZGl2IGlkPVwidmVyaWZ5XCI+PC9kaXY+XG4iXX0=