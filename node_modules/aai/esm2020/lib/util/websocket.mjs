export class WebSocketCreater {
    constructor(params) {
        this.keepalive = true;
        this.serverTimeoutObj = null;
        this.timeoutObj = null;
        this.timeoutReconnect = null;
        this.lockReconnect = false;
        this.wsProgram = null;
        this.par = {
            url: '',
            protocols: undefined,
            call: undefined,
            heart: 30000,
            reconnect: 4000,
        };
        this.par = Object.assign(this.par, params);
        this.createWebSocket();
    }
    closeWS() {
        this.keepalive = false;
        if (this.wsProgram.readyState === 1) {
            this.wsProgram.close();
        }
    }
    createWebSocket() {
        try {
            this.wsProgram = new WebSocket(this.par.url, this.par.protocols);
            this.init(this.par.call);
        }
        catch (e) {
            console.log(e);
            this.reconnect();
        }
    }
    init(call) {
        this.wsProgram.onopen = () => {
            this.wsProgram.send('1');
            this.heartCheck();
        };
        this.wsProgram.onmessage = (evt) => {
            const res = JSON.parse(evt.data);
            call(res);
            this.heartCheck();
        };
        this.wsProgram.onclose = () => {
            if (this.keepalive) {
                this.reconnect();
            }
            else {
                // console.log('closed!');
            }
        };
    }
    heartCheck() {
        if (this.keepalive) {
            clearTimeout(this.timeoutObj);
            clearTimeout(this.serverTimeoutObj);
            this.timeoutObj = setTimeout(() => {
                if (this.wsProgram.readyState === 1) {
                    this.wsProgram.send('1');
                    this.serverTimeoutObj = setTimeout(() => {
                        this.wsProgram.close();
                    }, this.par.heart);
                }
            }, this.par.heart);
        }
    }
    reconnect() {
        if (this.lockReconnect) {
            return;
        }
        this.lockReconnect = true;
        clearTimeout(this.timeoutReconnect);
        this.timeoutReconnect = setTimeout(() => {
            this.createWebSocket();
            this.lockReconnect = false;
        }, this.par.reconnect);
    }
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoid2Vic29ja2V0LmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vLi4vLi4vLi4vcHJvamVjdHMvYWFpL3NyYy9saWIvdXRpbC93ZWJzb2NrZXQudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBU0EsTUFBTSxPQUFPLGdCQUFnQjtJQVV6QixZQUFtQixNQUFlO1FBUjNCLGNBQVMsR0FBWSxJQUFJLENBQUM7UUFTN0IsSUFBSSxDQUFDLGdCQUFnQixHQUFHLElBQUksQ0FBQztRQUM3QixJQUFJLENBQUMsVUFBVSxHQUFHLElBQUksQ0FBQztRQUN2QixJQUFJLENBQUMsZ0JBQWdCLEdBQUcsSUFBSSxDQUFDO1FBQzdCLElBQUksQ0FBQyxhQUFhLEdBQUcsS0FBSyxDQUFDO1FBQzNCLElBQUksQ0FBQyxTQUFTLEdBQUcsSUFBSSxDQUFDO1FBQ3RCLElBQUksQ0FBQyxHQUFHLEdBQUc7WUFDUCxHQUFHLEVBQUUsRUFBRTtZQUNQLFNBQVMsRUFBRSxTQUFTO1lBQ3BCLElBQUksRUFBRSxTQUFTO1lBQ2YsS0FBSyxFQUFFLEtBQUs7WUFDWixTQUFTLEVBQUUsSUFBSTtTQUNsQixDQUFDO1FBQ0YsSUFBSSxDQUFDLEdBQUcsR0FBRyxNQUFNLENBQUMsTUFBTSxDQUFDLElBQUksQ0FBQyxHQUFHLEVBQUUsTUFBTSxDQUFDLENBQUM7UUFDM0MsSUFBSSxDQUFDLGVBQWUsRUFBRSxDQUFDO0lBQzNCLENBQUM7SUFFTSxPQUFPO1FBQ1YsSUFBSSxDQUFDLFNBQVMsR0FBRyxLQUFLLENBQUM7UUFDdkIsSUFBSSxJQUFJLENBQUMsU0FBUyxDQUFDLFVBQVUsS0FBSyxDQUFDLEVBQUU7WUFDakMsSUFBSSxDQUFDLFNBQVMsQ0FBQyxLQUFLLEVBQUUsQ0FBQztTQUMxQjtJQUNMLENBQUM7SUFFTyxlQUFlO1FBQ25CLElBQUk7WUFDQSxJQUFJLENBQUMsU0FBUyxHQUFHLElBQUksU0FBUyxDQUFDLElBQUksQ0FBQyxHQUFHLENBQUMsR0FBRyxFQUFFLElBQUksQ0FBQyxHQUFHLENBQUMsU0FBUyxDQUFDLENBQUM7WUFDakUsSUFBSSxDQUFDLElBQUksQ0FBQyxJQUFJLENBQUMsR0FBRyxDQUFDLElBQUksQ0FBQyxDQUFDO1NBQzVCO1FBQUMsT0FBTyxDQUFDLEVBQUU7WUFDUixPQUFPLENBQUMsR0FBRyxDQUFDLENBQUMsQ0FBQyxDQUFDO1lBQ2YsSUFBSSxDQUFDLFNBQVMsRUFBRSxDQUFDO1NBQ3BCO0lBQ0wsQ0FBQztJQUVPLElBQUksQ0FBQyxJQUFxQjtRQUM5QixJQUFJLENBQUMsU0FBUyxDQUFDLE1BQU0sR0FBRyxHQUFHLEVBQUU7WUFDekIsSUFBSSxDQUFDLFNBQVMsQ0FBQyxJQUFJLENBQUMsR0FBRyxDQUFDLENBQUM7WUFDekIsSUFBSSxDQUFDLFVBQVUsRUFBRSxDQUFDO1FBQ3RCLENBQUMsQ0FBQztRQUVGLElBQUksQ0FBQyxTQUFTLENBQUMsU0FBUyxHQUFHLENBQUMsR0FBRyxFQUFFLEVBQUU7WUFDL0IsTUFBTSxHQUFHLEdBQUcsSUFBSSxDQUFDLEtBQUssQ0FBQyxHQUFHLENBQUMsSUFBSSxDQUFDLENBQUM7WUFDakMsSUFBSSxDQUFDLEdBQUcsQ0FBQyxDQUFDO1lBQ1YsSUFBSSxDQUFDLFVBQVUsRUFBRSxDQUFDO1FBQ3RCLENBQUMsQ0FBQztRQUVGLElBQUksQ0FBQyxTQUFTLENBQUMsT0FBTyxHQUFHLEdBQUcsRUFBRTtZQUMxQixJQUFJLElBQUksQ0FBQyxTQUFTLEVBQUU7Z0JBQ2hCLElBQUksQ0FBQyxTQUFTLEVBQUUsQ0FBQzthQUNwQjtpQkFBTTtnQkFDSCwwQkFBMEI7YUFDN0I7UUFDTCxDQUFDLENBQUM7SUFDTixDQUFDO0lBRU8sVUFBVTtRQUNkLElBQUksSUFBSSxDQUFDLFNBQVMsRUFBRTtZQUNoQixZQUFZLENBQUMsSUFBSSxDQUFDLFVBQVUsQ0FBQyxDQUFDO1lBQzlCLFlBQVksQ0FBQyxJQUFJLENBQUMsZ0JBQWdCLENBQUMsQ0FBQztZQUNwQyxJQUFJLENBQUMsVUFBVSxHQUFHLFVBQVUsQ0FBQyxHQUFHLEVBQUU7Z0JBQzlCLElBQUksSUFBSSxDQUFDLFNBQVMsQ0FBQyxVQUFVLEtBQUssQ0FBQyxFQUFFO29CQUNqQyxJQUFJLENBQUMsU0FBUyxDQUFDLElBQUksQ0FBQyxHQUFHLENBQUMsQ0FBQztvQkFDekIsSUFBSSxDQUFDLGdCQUFnQixHQUFHLFVBQVUsQ0FBQyxHQUFHLEVBQUU7d0JBQ3BDLElBQUksQ0FBQyxTQUFTLENBQUMsS0FBSyxFQUFFLENBQUM7b0JBQzNCLENBQUMsRUFBRSxJQUFJLENBQUMsR0FBRyxDQUFDLEtBQUssQ0FBQyxDQUFDO2lCQUN0QjtZQUNMLENBQUMsRUFBRSxJQUFJLENBQUMsR0FBRyxDQUFDLEtBQUssQ0FBQyxDQUFDO1NBQ3RCO0lBQ0wsQ0FBQztJQUVPLFNBQVM7UUFDYixJQUFJLElBQUksQ0FBQyxhQUFhLEVBQUU7WUFDcEIsT0FBTztTQUNWO1FBQ0QsSUFBSSxDQUFDLGFBQWEsR0FBRyxJQUFJLENBQUM7UUFDMUIsWUFBWSxDQUFDLElBQUksQ0FBQyxnQkFBZ0IsQ0FBQyxDQUFDO1FBQ3BDLElBQUksQ0FBQyxnQkFBZ0IsR0FBRyxVQUFVLENBQUMsR0FBRyxFQUFFO1lBQ3BDLElBQUksQ0FBQyxlQUFlLEVBQUUsQ0FBQztZQUN2QixJQUFJLENBQUMsYUFBYSxHQUFHLEtBQUssQ0FBQztRQUMvQixDQUFDLEVBQUUsSUFBSSxDQUFDLEdBQUcsQ0FBQyxTQUFTLENBQUMsQ0FBQztJQUMzQixDQUFDO0NBRUoiLCJzb3VyY2VzQ29udGVudCI6WyJpbnRlcmZhY2UgT3B0aW9ucyB7XG4gICAgdXJsOiBzdHJpbmc7XG4gICAgcHJvdG9jb2xzPzogc3RyaW5nO1xuICAgIGhlYXJ0PzogbnVtYmVyO1xuICAgIHJlY29ubmVjdD86IG51bWJlcjtcblxuICAgIGNhbGw/KHN0aW5nKTogdm9pZDtcbn1cblxuZXhwb3J0IGNsYXNzIFdlYlNvY2tldENyZWF0ZXIge1xuICAgIHB1YmxpYyBwYXI6IE9wdGlvbnM7XG4gICAgcHVibGljIGtlZXBhbGl2ZTogYm9vbGVhbiA9IHRydWU7XG4gICAgcHVibGljIHdzUHJvZ3JhbTtcblxuICAgIHByaXZhdGUgc2VydmVyVGltZW91dE9iajogYW55O1xuICAgIHByaXZhdGUgdGltZW91dE9iajogYW55O1xuICAgIHByaXZhdGUgdGltZW91dFJlY29ubmVjdDogYW55O1xuICAgIHByaXZhdGUgbG9ja1JlY29ubmVjdDogYm9vbGVhbjtcblxuICAgIHB1YmxpYyBjb25zdHJ1Y3RvcihwYXJhbXM6IE9wdGlvbnMpIHtcbiAgICAgICAgdGhpcy5zZXJ2ZXJUaW1lb3V0T2JqID0gbnVsbDtcbiAgICAgICAgdGhpcy50aW1lb3V0T2JqID0gbnVsbDtcbiAgICAgICAgdGhpcy50aW1lb3V0UmVjb25uZWN0ID0gbnVsbDtcbiAgICAgICAgdGhpcy5sb2NrUmVjb25uZWN0ID0gZmFsc2U7XG4gICAgICAgIHRoaXMud3NQcm9ncmFtID0gbnVsbDtcbiAgICAgICAgdGhpcy5wYXIgPSB7XG4gICAgICAgICAgICB1cmw6ICcnLFxuICAgICAgICAgICAgcHJvdG9jb2xzOiB1bmRlZmluZWQsXG4gICAgICAgICAgICBjYWxsOiB1bmRlZmluZWQsXG4gICAgICAgICAgICBoZWFydDogMzAwMDAsXG4gICAgICAgICAgICByZWNvbm5lY3Q6IDQwMDAsXG4gICAgICAgIH07XG4gICAgICAgIHRoaXMucGFyID0gT2JqZWN0LmFzc2lnbih0aGlzLnBhciwgcGFyYW1zKTtcbiAgICAgICAgdGhpcy5jcmVhdGVXZWJTb2NrZXQoKTtcbiAgICB9XG5cbiAgICBwdWJsaWMgY2xvc2VXUygpIHtcbiAgICAgICAgdGhpcy5rZWVwYWxpdmUgPSBmYWxzZTtcbiAgICAgICAgaWYgKHRoaXMud3NQcm9ncmFtLnJlYWR5U3RhdGUgPT09IDEpIHtcbiAgICAgICAgICAgIHRoaXMud3NQcm9ncmFtLmNsb3NlKCk7XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICBwcml2YXRlIGNyZWF0ZVdlYlNvY2tldCgpIHtcbiAgICAgICAgdHJ5IHtcbiAgICAgICAgICAgIHRoaXMud3NQcm9ncmFtID0gbmV3IFdlYlNvY2tldCh0aGlzLnBhci51cmwsIHRoaXMucGFyLnByb3RvY29scyk7XG4gICAgICAgICAgICB0aGlzLmluaXQodGhpcy5wYXIuY2FsbCk7XG4gICAgICAgIH0gY2F0Y2ggKGUpIHtcbiAgICAgICAgICAgIGNvbnNvbGUubG9nKGUpO1xuICAgICAgICAgICAgdGhpcy5yZWNvbm5lY3QoKTtcbiAgICAgICAgfVxuICAgIH1cblxuICAgIHByaXZhdGUgaW5pdChjYWxsOiAoc3RpbmcpID0+IHZvaWQpIHtcbiAgICAgICAgdGhpcy53c1Byb2dyYW0ub25vcGVuID0gKCkgPT4ge1xuICAgICAgICAgICAgdGhpcy53c1Byb2dyYW0uc2VuZCgnMScpO1xuICAgICAgICAgICAgdGhpcy5oZWFydENoZWNrKCk7XG4gICAgICAgIH07XG5cbiAgICAgICAgdGhpcy53c1Byb2dyYW0ub25tZXNzYWdlID0gKGV2dCkgPT4ge1xuICAgICAgICAgICAgY29uc3QgcmVzID0gSlNPTi5wYXJzZShldnQuZGF0YSk7XG4gICAgICAgICAgICBjYWxsKHJlcyk7XG4gICAgICAgICAgICB0aGlzLmhlYXJ0Q2hlY2soKTtcbiAgICAgICAgfTtcblxuICAgICAgICB0aGlzLndzUHJvZ3JhbS5vbmNsb3NlID0gKCkgPT4ge1xuICAgICAgICAgICAgaWYgKHRoaXMua2VlcGFsaXZlKSB7XG4gICAgICAgICAgICAgICAgdGhpcy5yZWNvbm5lY3QoKTtcbiAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgLy8gY29uc29sZS5sb2coJ2Nsb3NlZCEnKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfTtcbiAgICB9XG5cbiAgICBwcml2YXRlIGhlYXJ0Q2hlY2soKSB7XG4gICAgICAgIGlmICh0aGlzLmtlZXBhbGl2ZSkge1xuICAgICAgICAgICAgY2xlYXJUaW1lb3V0KHRoaXMudGltZW91dE9iaik7XG4gICAgICAgICAgICBjbGVhclRpbWVvdXQodGhpcy5zZXJ2ZXJUaW1lb3V0T2JqKTtcbiAgICAgICAgICAgIHRoaXMudGltZW91dE9iaiA9IHNldFRpbWVvdXQoKCkgPT4ge1xuICAgICAgICAgICAgICAgIGlmICh0aGlzLndzUHJvZ3JhbS5yZWFkeVN0YXRlID09PSAxKSB7XG4gICAgICAgICAgICAgICAgICAgIHRoaXMud3NQcm9ncmFtLnNlbmQoJzEnKTtcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5zZXJ2ZXJUaW1lb3V0T2JqID0gc2V0VGltZW91dCgoKSA9PiB7XG4gICAgICAgICAgICAgICAgICAgICAgICB0aGlzLndzUHJvZ3JhbS5jbG9zZSgpO1xuICAgICAgICAgICAgICAgICAgICB9LCB0aGlzLnBhci5oZWFydCk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfSwgdGhpcy5wYXIuaGVhcnQpO1xuICAgICAgICB9XG4gICAgfVxuXG4gICAgcHJpdmF0ZSByZWNvbm5lY3QoKSB7XG4gICAgICAgIGlmICh0aGlzLmxvY2tSZWNvbm5lY3QpIHtcbiAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgfVxuICAgICAgICB0aGlzLmxvY2tSZWNvbm5lY3QgPSB0cnVlO1xuICAgICAgICBjbGVhclRpbWVvdXQodGhpcy50aW1lb3V0UmVjb25uZWN0KTtcbiAgICAgICAgdGhpcy50aW1lb3V0UmVjb25uZWN0ID0gc2V0VGltZW91dCgoKSA9PiB7XG4gICAgICAgICAgICB0aGlzLmNyZWF0ZVdlYlNvY2tldCgpO1xuICAgICAgICAgICAgdGhpcy5sb2NrUmVjb25uZWN0ID0gZmFsc2U7XG4gICAgICAgIH0sIHRoaXMucGFyLnJlY29ubmVjdCk7XG4gICAgfVxuXG59XG4iXX0=