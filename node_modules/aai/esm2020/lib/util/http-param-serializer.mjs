import { HttpParams } from '@angular/common/http';
import { formatDateTime } from './format-date';
/**
 * create HttpParams from key value object
 *
 */
export const httpParamSerializer = (request) => {
    return new HttpParams({ fromString: toQueryString(request) });
};
/**
 * 复杂类型请使用json, 改用post
 * @example
 *      toQueryString({ a: 2, b: 'abc', c: true, d: false })        -> a=2&b=abc&c=true&d=false
 *      toQueryString({ a: 2, b: new Date() })                      -> yyyy-MM-dd HH:mm:ss
 *      toQueryString({ a: null, b: undefined, c: 1 })              -> a=&b=&c=1
 */
export function toQueryString(fromObject) {
    const resultMap = new Map();
    Object.keys(fromObject).forEach(key => {
        const value = fromObject[key];
        if (value === null || value === undefined) {
            resultMap.set(key, ['']);
        }
        else if (Array.isArray(value)) {
            resultMap.set(key, value);
        }
        else if (value instanceof Date) {
            resultMap.set(key, [formatDateTime(value)]);
        }
        else {
            resultMap.set(key, [value]);
        }
    });
    return Array.from(resultMap.keys())
        .map(key => {
        const eKey = encodeURIComponent(key);
        return resultMap.get(key)
            .map(value => `${eKey}=${encodeURIComponent(value)}`)
            .join('&');
    })
        .join('&');
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaHR0cC1wYXJhbS1zZXJpYWxpemVyLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vLi4vLi4vLi4vcHJvamVjdHMvYWFpL3NyYy9saWIvdXRpbC9odHRwLXBhcmFtLXNlcmlhbGl6ZXIudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEsT0FBTyxFQUFFLFVBQVUsRUFBRSxNQUFNLHNCQUFzQixDQUFDO0FBQ2xELE9BQU8sRUFBRSxjQUFjLEVBQUUsTUFBTSxlQUFlLENBQUM7QUFFL0M7OztHQUdHO0FBQ0gsTUFBTSxDQUFDLE1BQU0sbUJBQW1CLEdBQUcsQ0FBQyxPQUF3QyxFQUFjLEVBQUU7SUFDeEYsT0FBTyxJQUFJLFVBQVUsQ0FBQyxFQUFFLFVBQVUsRUFBRSxhQUFhLENBQUMsT0FBTyxDQUFDLEVBQUUsQ0FBQyxDQUFDO0FBQ2xFLENBQUMsQ0FBQztBQUlGOzs7Ozs7R0FNRztBQUNILE1BQU0sVUFBVSxhQUFhLENBQUMsVUFBMkM7SUFDckUsTUFBTSxTQUFTLEdBQUcsSUFBSSxHQUFHLEVBQW9CLENBQUM7SUFDOUMsTUFBTSxDQUFDLElBQUksQ0FBQyxVQUFVLENBQUMsQ0FBQyxPQUFPLENBQUMsR0FBRyxDQUFDLEVBQUU7UUFDbEMsTUFBTSxLQUFLLEdBQUksVUFBa0IsQ0FBQyxHQUFHLENBQUMsQ0FBQztRQUN2QyxJQUFJLEtBQUssS0FBSyxJQUFJLElBQUksS0FBSyxLQUFLLFNBQVMsRUFBRTtZQUN2QyxTQUFTLENBQUMsR0FBRyxDQUFDLEdBQUcsRUFBRSxDQUFDLEVBQUUsQ0FBQyxDQUFDLENBQUM7U0FDNUI7YUFBTSxJQUFJLEtBQUssQ0FBQyxPQUFPLENBQUMsS0FBSyxDQUFDLEVBQUU7WUFDN0IsU0FBUyxDQUFDLEdBQUcsQ0FBQyxHQUFHLEVBQUUsS0FBSyxDQUFDLENBQUM7U0FDN0I7YUFBTSxJQUFJLEtBQUssWUFBWSxJQUFJLEVBQUU7WUFDOUIsU0FBUyxDQUFDLEdBQUcsQ0FBQyxHQUFHLEVBQUUsQ0FBQyxjQUFjLENBQUMsS0FBSyxDQUFDLENBQUMsQ0FBQyxDQUFDO1NBQy9DO2FBQU07WUFDSCxTQUFTLENBQUMsR0FBRyxDQUFDLEdBQUcsRUFBRSxDQUFDLEtBQUssQ0FBQyxDQUFDLENBQUM7U0FDL0I7SUFDTCxDQUFDLENBQUMsQ0FBQztJQUNILE9BQU8sS0FBSyxDQUFDLElBQUksQ0FBQyxTQUFTLENBQUMsSUFBSSxFQUFFLENBQUM7U0FDOUIsR0FBRyxDQUFDLEdBQUcsQ0FBQyxFQUFFO1FBQ1AsTUFBTSxJQUFJLEdBQUcsa0JBQWtCLENBQUMsR0FBRyxDQUFDLENBQUM7UUFDckMsT0FBTyxTQUFTLENBQUMsR0FBRyxDQUFDLEdBQUcsQ0FBQzthQUNwQixHQUFHLENBQUMsS0FBSyxDQUFDLEVBQUUsQ0FBQyxHQUFHLElBQUksSUFBSSxrQkFBa0IsQ0FBQyxLQUFLLENBQUMsRUFBRSxDQUFDO2FBQ3BELElBQUksQ0FBQyxHQUFHLENBQUMsQ0FBQztJQUNuQixDQUFDLENBQUM7U0FDRCxJQUFJLENBQUMsR0FBRyxDQUFDLENBQUM7QUFDbkIsQ0FBQyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IEh0dHBQYXJhbXMgfSBmcm9tICdAYW5ndWxhci9jb21tb24vaHR0cCc7XG5pbXBvcnQgeyBmb3JtYXREYXRlVGltZSB9IGZyb20gJy4vZm9ybWF0LWRhdGUnO1xuXG4vKipcbiAqIGNyZWF0ZSBIdHRwUGFyYW1zIGZyb20ga2V5IHZhbHVlIG9iamVjdFxuICpcbiAqL1xuZXhwb3J0IGNvbnN0IGh0dHBQYXJhbVNlcmlhbGl6ZXIgPSAocmVxdWVzdDogeyBbcGFyYW06IHN0cmluZ106IHNpbXBsZVR5cGUgfSk6IEh0dHBQYXJhbXMgPT4ge1xuICAgIHJldHVybiBuZXcgSHR0cFBhcmFtcyh7IGZyb21TdHJpbmc6IHRvUXVlcnlTdHJpbmcocmVxdWVzdCkgfSk7XG59O1xuXG50eXBlIHNpbXBsZVR5cGUgPSBzdHJpbmcgfCBzdHJpbmdbXSB8IG51bWJlciB8IG51bWJlcltdIHwgRGF0ZSB8IG51bGwgfCB1bmRlZmluZWQgfCBib29sZWFuO1xuXG4vKipcbiAqIOWkjeadguexu+Wei+ivt+S9v+eUqGpzb24sIOaUueeUqHBvc3RcbiAqIEBleGFtcGxlXG4gKiAgICAgIHRvUXVlcnlTdHJpbmcoeyBhOiAyLCBiOiAnYWJjJywgYzogdHJ1ZSwgZDogZmFsc2UgfSkgICAgICAgIC0+IGE9MiZiPWFiYyZjPXRydWUmZD1mYWxzZVxuICogICAgICB0b1F1ZXJ5U3RyaW5nKHsgYTogMiwgYjogbmV3IERhdGUoKSB9KSAgICAgICAgICAgICAgICAgICAgICAtPiB5eXl5LU1NLWRkIEhIOm1tOnNzXG4gKiAgICAgIHRvUXVlcnlTdHJpbmcoeyBhOiBudWxsLCBiOiB1bmRlZmluZWQsIGM6IDEgfSkgICAgICAgICAgICAgIC0+IGE9JmI9JmM9MVxuICovXG5leHBvcnQgZnVuY3Rpb24gdG9RdWVyeVN0cmluZyhmcm9tT2JqZWN0OiB7IFtwYXJhbTogc3RyaW5nXTogc2ltcGxlVHlwZSB9KTogc3RyaW5nIHtcbiAgICBjb25zdCByZXN1bHRNYXAgPSBuZXcgTWFwPHN0cmluZywgc3RyaW5nW10+KCk7XG4gICAgT2JqZWN0LmtleXMoZnJvbU9iamVjdCkuZm9yRWFjaChrZXkgPT4ge1xuICAgICAgICBjb25zdCB2YWx1ZSA9IChmcm9tT2JqZWN0IGFzIGFueSlba2V5XTtcbiAgICAgICAgaWYgKHZhbHVlID09PSBudWxsIHx8IHZhbHVlID09PSB1bmRlZmluZWQpIHtcbiAgICAgICAgICAgIHJlc3VsdE1hcC5zZXQoa2V5LCBbJyddKTtcbiAgICAgICAgfSBlbHNlIGlmIChBcnJheS5pc0FycmF5KHZhbHVlKSkge1xuICAgICAgICAgICAgcmVzdWx0TWFwLnNldChrZXksIHZhbHVlKTtcbiAgICAgICAgfSBlbHNlIGlmICh2YWx1ZSBpbnN0YW5jZW9mIERhdGUpIHtcbiAgICAgICAgICAgIHJlc3VsdE1hcC5zZXQoa2V5LCBbZm9ybWF0RGF0ZVRpbWUodmFsdWUpXSk7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICByZXN1bHRNYXAuc2V0KGtleSwgW3ZhbHVlXSk7XG4gICAgICAgIH1cbiAgICB9KTtcbiAgICByZXR1cm4gQXJyYXkuZnJvbShyZXN1bHRNYXAua2V5cygpKVxuICAgICAgICAubWFwKGtleSA9PiB7XG4gICAgICAgICAgICBjb25zdCBlS2V5ID0gZW5jb2RlVVJJQ29tcG9uZW50KGtleSk7XG4gICAgICAgICAgICByZXR1cm4gcmVzdWx0TWFwLmdldChrZXkpXG4gICAgICAgICAgICAgICAgLm1hcCh2YWx1ZSA9PiBgJHtlS2V5fT0ke2VuY29kZVVSSUNvbXBvbmVudCh2YWx1ZSl9YClcbiAgICAgICAgICAgICAgICAuam9pbignJicpO1xuICAgICAgICB9KVxuICAgICAgICAuam9pbignJicpO1xufVxuIl19