import { Inject, Injectable, InjectionToken } from '@angular/core';
import * as i0 from "@angular/core";
export var StorageType;
(function (StorageType) {
    StorageType[StorageType["localStorage"] = 0] = "localStorage";
    StorageType[StorageType["sessionStorage"] = 1] = "sessionStorage";
})(StorageType || (StorageType = {}));
export const AUTH_CONFIG = new InjectionToken('auth-config', { providedIn: 'root', factory: AUTH_CONFIG_FACTORY });
export function AUTH_CONFIG_FACTORY() {
    return new AuthConfig();
}
export class AuthConfig {
    constructor() {
        this.storageType = StorageType.localStorage;
        this.storageName = 'oauthToken';
    }
}
export class AuthConfigService {
    constructor(config) {
        this.config = config;
        this.defaultConfig = {
            storageType: StorageType.localStorage,
            storageName: 'oauthToken',
            baseUrl: '',
            clientId: 'VBL.Manage.End',
            scope: 'openid profile default-api',
            redirectUri: window.top.location.origin,
            profileUri: 'userinfo',
            logoutPath: '/',
            notAuthUrl: 'login,manage/user/mobile/',
            tokenType: 'token_type',
            accessToken: 'access_token',
            upperTokenType: true,
        };
        this.authConfig = { ...this.defaultConfig, ...this.config };
    }
    getStorage() {
        let storage;
        if (this.authConfig.storageType === StorageType.localStorage) {
            storage = localStorage;
        }
        else {
            storage = sessionStorage;
        }
        return storage;
    }
    getToken() {
        const dataString = this.getStorage()[this.authConfig.storageName];
        if (dataString) {
            const data = JSON.parse(dataString);
            if (data && data.expires_at && new Date(data.expires_at) >= new Date()) {
                return data;
            }
        }
        return null;
    }
    getAuthorizationHeader() {
        const token = this.getToken();
        if (token) {
            const tokenType = token.token_type;
            const accessToken = token.access_token;
            return `${this.config.upperTokenType ? tokenType[0].toUpperCase() : tokenType[0] + tokenType.substr(1)} ${accessToken}`;
        }
        return '';
    }
    setToken(data) {
        this.getStorage()[this.authConfig.storageName] = JSON.stringify(data);
    }
    removeToken() {
        delete this.getStorage()[this.authConfig.storageName];
    }
    login(tokenStr, remember = true) {
        const token = {};
        token[this.authConfig.tokenType] = 'bearer';
        token[this.authConfig.accessToken] = tokenStr;
        if (!remember) {
            this.authConfig.storageType = StorageType.sessionStorage;
        }
        else {
            const date = new Date();
            this.authConfig.storageType = StorageType.localStorage;
            token.expires_at = date.setDate(date.getDate() + 7);
        }
        this.setToken(token);
    }
    logout() {
        sessionStorage.clear();
        this.removeToken();
        window.top.location.href = `${this.authConfig.logoutPath}`;
    }
}
AuthConfigService.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "15.0.1", ngImport: i0, type: AuthConfigService, deps: [{ token: AUTH_CONFIG }], target: i0.ɵɵFactoryTarget.Injectable });
AuthConfigService.ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: "12.0.0", version: "15.0.1", ngImport: i0, type: AuthConfigService, providedIn: 'root' });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "15.0.1", ngImport: i0, type: AuthConfigService, decorators: [{
            type: Injectable,
            args: [{
                    providedIn: 'root'
                }]
        }], ctorParameters: function () { return [{ type: AuthConfig, decorators: [{
                    type: Inject,
                    args: [AUTH_CONFIG]
                }] }]; } });
//# sourceMappingURL=data:application/json;base64,