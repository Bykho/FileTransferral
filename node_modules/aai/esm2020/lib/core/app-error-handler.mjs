import { HttpErrorResponse } from '@angular/common/http';
import { Injectable } from '@angular/core';
import { NavigationError, Router } from '@angular/router';
import * as i0 from "@angular/core";
import * as i1 from "./message.service";
export class AppErrorHandler {
    constructor(injector, messageService, callBack) {
        this.injector = injector;
        this.messageService = messageService;
        this.callBack = callBack;
        this.handleRouterError();
    }
    handleError(error) {
        this.messageService.hideLoading();
        console.error(error);
        // NavigationError
        if (error.rejection && error.task && error.promise) {
            return;
        }
        if (error instanceof Error) {
            this.unhandledError(error);
            return;
        }
        if (error instanceof HttpErrorResponse) {
            this.handleHttpResponseError(error);
            return;
        }
    }
    unhandledError(error) {
        this.messageService.error(error.message.split(' ')[0]);
        this.callBack(error.message.split(' ')[1]);
    }
    // tslint:disable-next-line:cyclomatic-complexity
    handleHttpResponseError(error) {
        let currentError = error.error;
        if (currentError instanceof Error) {
            this.messageService.error(currentError.message);
            return;
        }
        if (currentError instanceof String || typeof currentError === 'string') {
            try {
                currentError = JSON.parse(currentError.toString());
            }
            catch (e) {
                //
            }
        }
        if (error.status <= 0) {
            setTimeout(() => {
                const router = this.injector.get(Router);
                router.navigate(['/error/navigation'], {
                    skipLocationChange: true,
                    queryParams: { url: '/', message: '请求api时出现网络错误! 请按F5键刷新页面重试!' },
                });
            });
            return;
        }
        if (error.status >= 400) {
            const translate = {
                400: '请求错误',
                401: '授权认证失败',
                403: '禁止访问',
                404: '资源未找到',
                405: '不支持该操作',
                422: '请求数据有误',
                500: '内部服务器错误',
                503: '网络故障'
            };
            let message = translate[error.status] || '未知错误!';
            if (currentError) {
                message = currentError.resultMsg || currentError;
                if (error.status >= 500) {
                    setTimeout(() => this.messageService.error(message));
                    return;
                }
                if (error.status !== 401) {
                    setTimeout(() => this.messageService.warn(message));
                    return;
                }
                else {
                    return;
                }
            }
            setTimeout(() => this.messageService.error(message));
            return;
        }
    }
    handleRouterError() {
        setTimeout(() => {
            const router = this.injector.get(Router);
            router.events.subscribe(event => {
                if (event instanceof NavigationError) {
                    const { url, error } = event;
                    const { message /*, stack*/ } = error;
                    router.navigate(['/error/navigation'], {
                        skipLocationChange: true,
                        queryParams: { url, message: message || error },
                    });
                }
            });
        });
    }
}
AppErrorHandler.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "15.0.1", ngImport: i0, type: AppErrorHandler, deps: "invalid", target: i0.ɵɵFactoryTarget.Injectable });
AppErrorHandler.ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: "12.0.0", version: "15.0.1", ngImport: i0, type: AppErrorHandler });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "15.0.1", ngImport: i0, type: AppErrorHandler, decorators: [{
            type: Injectable
        }], ctorParameters: function () { return [{ type: i0.Injector }, { type: i1.MessageService }, { type: undefined }]; } });
//# sourceMappingURL=data:application/json;base64,