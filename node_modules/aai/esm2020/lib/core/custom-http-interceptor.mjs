import { HttpErrorResponse } from '@angular/common/http';
import { Injectable } from '@angular/core';
import { tap } from 'rxjs/operators';
import * as i0 from "@angular/core";
import * as i1 from "./auth-config.service";
export const interceptorFactory = (config) => {
    return new CustomHttpInterceptor(config);
};
export class CustomHttpInterceptor {
    constructor(authConfig) {
        this.authConfig = authConfig;
    }
    intercept(req, next) {
        let authReq = req;
        if (!(new RegExp(this.authConfig.authConfig.notAuthUrl.split(',').join('$|') + '$').test(req.url))) {
            // Get the auth header from the service.
            const authHeaderName = 'Authorization';
            // Clone the request to add the new header.
            authReq = req.clone({
                headers: req.headers.set(authHeaderName, this.authConfig.getAuthorizationHeader())
            });
        }
        // Pass on the cloned request instead of the original request.
        return next.handle(authReq).pipe(tap(() => {
            // if (event instanceof HttpResponse) {
            //     // do stuff with response if you want
            // }
        }, error => {
            // Remember, there may be other events besides just the response.
            if (error instanceof HttpErrorResponse) {
                if (error.status === 401) {
                    console.log('登陆过期');
                }
            }
            return;
        }));
    }
}
CustomHttpInterceptor.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "15.0.1", ngImport: i0, type: CustomHttpInterceptor, deps: [{ token: i1.AuthConfigService }], target: i0.ɵɵFactoryTarget.Injectable });
CustomHttpInterceptor.ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: "12.0.0", version: "15.0.1", ngImport: i0, type: CustomHttpInterceptor });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "15.0.1", ngImport: i0, type: CustomHttpInterceptor, decorators: [{
            type: Injectable
        }], ctorParameters: function () { return [{ type: i1.AuthConfigService }]; } });
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiY3VzdG9tLWh0dHAtaW50ZXJjZXB0b3IuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi8uLi8uLi9wcm9qZWN0cy9hYWkvc3JjL2xpYi9jb3JlL2N1c3RvbS1odHRwLWludGVyY2VwdG9yLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBLE9BQU8sRUFBRSxpQkFBaUIsRUFBd0QsTUFBTSxzQkFBc0IsQ0FBQztBQUMvRyxPQUFPLEVBQUUsVUFBVSxFQUFFLE1BQU0sZUFBZSxDQUFDO0FBQzNDLE9BQU8sRUFBRSxHQUFHLEVBQUUsTUFBTSxnQkFBZ0IsQ0FBQzs7O0FBSXJDLE1BQU0sQ0FBQyxNQUFNLGtCQUFrQixHQUFHLENBQUMsTUFBTSxFQUFFLEVBQUU7SUFDekMsT0FBTyxJQUFJLHFCQUFxQixDQUFDLE1BQU0sQ0FBQyxDQUFDO0FBQzdDLENBQUMsQ0FBQztBQUdGLE1BQU0sT0FBTyxxQkFBcUI7SUFDOUIsWUFBMEIsVUFBOEI7UUFBOUIsZUFBVSxHQUFWLFVBQVUsQ0FBb0I7SUFDeEQsQ0FBQztJQUVNLFNBQVMsQ0FBQyxHQUFxQixFQUFFLElBQWlCO1FBQ3JELElBQUksT0FBTyxHQUFxQixHQUFHLENBQUM7UUFDcEMsSUFBSSxDQUFDLENBQUMsSUFBSSxNQUFNLENBQUMsSUFBSSxDQUFDLFVBQVUsQ0FBQyxVQUFVLENBQUMsVUFBVSxDQUFDLEtBQUssQ0FBRSxHQUFHLENBQUMsQ0FBQyxJQUFJLENBQUMsSUFBSSxDQUFDLEdBQUcsR0FBRyxDQUFDLENBQUMsSUFBSSxDQUFDLEdBQUcsQ0FBQyxHQUFHLENBQUMsQ0FBQyxFQUFFO1lBQ2pHLHdDQUF3QztZQUN4QyxNQUFNLGNBQWMsR0FBRyxlQUFlLENBQUM7WUFDdkMsMkNBQTJDO1lBQzNDLE9BQU8sR0FBRyxHQUFHLENBQUMsS0FBSyxDQUFDO2dCQUNoQixPQUFPLEVBQUUsR0FBRyxDQUFDLE9BQU8sQ0FBQyxHQUFHLENBQUMsY0FBYyxFQUFFLElBQUksQ0FBQyxVQUFVLENBQUMsc0JBQXNCLEVBQUUsQ0FBQzthQUNyRixDQUFDLENBQUM7U0FDTjtRQUNELDhEQUE4RDtRQUM5RCxPQUFPLElBQUksQ0FBQyxNQUFNLENBQUMsT0FBTyxDQUFDLENBQUMsSUFBSSxDQUM1QixHQUFHLENBQUMsR0FBRyxFQUFFO1lBQ0wsdUNBQXVDO1lBQ3ZDLDRDQUE0QztZQUM1QyxJQUFJO1FBQ1IsQ0FBQyxFQUFFLEtBQUssQ0FBQyxFQUFFO1lBQ1AsaUVBQWlFO1lBQ2pFLElBQUksS0FBSyxZQUFZLGlCQUFpQixFQUFFO2dCQUNwQyxJQUFJLEtBQUssQ0FBQyxNQUFNLEtBQUssR0FBRyxFQUFFO29CQUN0QixPQUFPLENBQUMsR0FBRyxDQUFDLE1BQU0sQ0FBQyxDQUFDO2lCQUN2QjthQUNKO1lBQ0QsT0FBTztRQUNYLENBQUMsQ0FBQyxDQUNMLENBQUM7SUFDTixDQUFDOztrSEE5QlEscUJBQXFCO3NIQUFyQixxQkFBcUI7MkZBQXJCLHFCQUFxQjtrQkFEakMsVUFBVSIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IEh0dHBFcnJvclJlc3BvbnNlLCBIdHRwRXZlbnQsIEh0dHBIYW5kbGVyLCBIdHRwSW50ZXJjZXB0b3IsIEh0dHBSZXF1ZXN0IH0gZnJvbSAnQGFuZ3VsYXIvY29tbW9uL2h0dHAnO1xuaW1wb3J0IHsgSW5qZWN0YWJsZSB9IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xuaW1wb3J0IHsgdGFwIH0gZnJvbSAncnhqcy9vcGVyYXRvcnMnO1xuaW1wb3J0IHsgT2JzZXJ2YWJsZSB9IGZyb20gJ3J4anMnO1xuaW1wb3J0IHsgQXV0aENvbmZpZ1NlcnZpY2UgfSBmcm9tICcuL2F1dGgtY29uZmlnLnNlcnZpY2UnO1xuXG5leHBvcnQgY29uc3QgaW50ZXJjZXB0b3JGYWN0b3J5ID0gKGNvbmZpZykgPT4ge1xuICAgIHJldHVybiBuZXcgQ3VzdG9tSHR0cEludGVyY2VwdG9yKGNvbmZpZyk7XG59O1xuXG5ASW5qZWN0YWJsZSgpXG5leHBvcnQgY2xhc3MgQ3VzdG9tSHR0cEludGVyY2VwdG9yIGltcGxlbWVudHMgSHR0cEludGVyY2VwdG9yIHtcbiAgICBwdWJsaWMgY29uc3RydWN0b3IocHVibGljIGF1dGhDb25maWc/OiBBdXRoQ29uZmlnU2VydmljZSkge1xuICAgIH1cblxuICAgIHB1YmxpYyBpbnRlcmNlcHQocmVxOiBIdHRwUmVxdWVzdDxhbnk+LCBuZXh0OiBIdHRwSGFuZGxlcik6IE9ic2VydmFibGU8SHR0cEV2ZW50PGFueT4+IHtcbiAgICAgICAgbGV0IGF1dGhSZXE6IEh0dHBSZXF1ZXN0PGFueT4gPSByZXE7XG4gICAgICAgIGlmICghKG5ldyBSZWdFeHAodGhpcy5hdXRoQ29uZmlnLmF1dGhDb25maWcubm90QXV0aFVybC5zcGxpdCggJywnKS5qb2luKCckfCcpICsgJyQnKS50ZXN0KHJlcS51cmwpKSkge1xuICAgICAgICAgICAgLy8gR2V0IHRoZSBhdXRoIGhlYWRlciBmcm9tIHRoZSBzZXJ2aWNlLlxuICAgICAgICAgICAgY29uc3QgYXV0aEhlYWRlck5hbWUgPSAnQXV0aG9yaXphdGlvbic7XG4gICAgICAgICAgICAvLyBDbG9uZSB0aGUgcmVxdWVzdCB0byBhZGQgdGhlIG5ldyBoZWFkZXIuXG4gICAgICAgICAgICBhdXRoUmVxID0gcmVxLmNsb25lKHtcbiAgICAgICAgICAgICAgICBoZWFkZXJzOiByZXEuaGVhZGVycy5zZXQoYXV0aEhlYWRlck5hbWUsIHRoaXMuYXV0aENvbmZpZy5nZXRBdXRob3JpemF0aW9uSGVhZGVyKCkpXG4gICAgICAgICAgICB9KTtcbiAgICAgICAgfVxuICAgICAgICAvLyBQYXNzIG9uIHRoZSBjbG9uZWQgcmVxdWVzdCBpbnN0ZWFkIG9mIHRoZSBvcmlnaW5hbCByZXF1ZXN0LlxuICAgICAgICByZXR1cm4gbmV4dC5oYW5kbGUoYXV0aFJlcSkucGlwZShcbiAgICAgICAgICAgIHRhcCgoKSA9PiB7XG4gICAgICAgICAgICAgICAgLy8gaWYgKGV2ZW50IGluc3RhbmNlb2YgSHR0cFJlc3BvbnNlKSB7XG4gICAgICAgICAgICAgICAgLy8gICAgIC8vIGRvIHN0dWZmIHdpdGggcmVzcG9uc2UgaWYgeW91IHdhbnRcbiAgICAgICAgICAgICAgICAvLyB9XG4gICAgICAgICAgICB9LCBlcnJvciA9PiB7XG4gICAgICAgICAgICAgICAgLy8gUmVtZW1iZXIsIHRoZXJlIG1heSBiZSBvdGhlciBldmVudHMgYmVzaWRlcyBqdXN0IHRoZSByZXNwb25zZS5cbiAgICAgICAgICAgICAgICBpZiAoZXJyb3IgaW5zdGFuY2VvZiBIdHRwRXJyb3JSZXNwb25zZSkge1xuICAgICAgICAgICAgICAgICAgICBpZiAoZXJyb3Iuc3RhdHVzID09PSA0MDEpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGNvbnNvbGUubG9nKCfnmbvpmYbov4fmnJ8nKTtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICByZXR1cm47XG4gICAgICAgICAgICB9KVxuICAgICAgICApO1xuICAgIH1cbn1cbiJdfQ==