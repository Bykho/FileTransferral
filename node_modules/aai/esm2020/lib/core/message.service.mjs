import { EventEmitter, Injectable } from '@angular/core';
import * as i0 from "@angular/core";
export class MessageModel {
}
var MsgType;
(function (MsgType) {
    MsgType["error"] = "\u9519\u8BEF";
    MsgType["success"] = "\u64CD\u4F5C\u6210\u529F";
    MsgType["info"] = "\u6CE8\u610F";
    MsgType["warning"] = "\u8B66\u544A";
})(MsgType || (MsgType = {}));
export class MessageService {
    constructor() {
        this.loadingSubject = new EventEmitter();
        this.growlSubject = new EventEmitter();
    }
    showLoading() {
        this.loadingSubject.emit(false);
    }
    hideLoading() {
        this.loadingSubject.emit(true);
    }
    success(detail, summary = 'success') {
        const content = {
            type: summary,
            title: MsgType[summary],
            content: detail
        };
        this.growlSubject.emit(content);
    }
    info(detail, summary = 'info') {
        const content = {
            type: summary,
            title: MsgType[summary],
            content: detail
        };
        this.growlSubject.emit(content);
    }
    warn(detail, summary = 'warning') {
        const content = {
            type: summary,
            title: MsgType[summary],
            content: detail
        };
        this.growlSubject.emit(content);
    }
    error(detail, summary = 'error') {
        const content = {
            type: summary,
            title: MsgType[summary],
            content: detail
        };
        this.growlSubject.emit(content);
    }
}
MessageService.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "15.0.1", ngImport: i0, type: MessageService, deps: [], target: i0.ɵɵFactoryTarget.Injectable });
MessageService.ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: "12.0.0", version: "15.0.1", ngImport: i0, type: MessageService, providedIn: 'root' });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "15.0.1", ngImport: i0, type: MessageService, decorators: [{
            type: Injectable,
            args: [{
                    providedIn: 'root'
                }]
        }] });
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibWVzc2FnZS5zZXJ2aWNlLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vLi4vLi4vLi4vcHJvamVjdHMvYWFpL3NyYy9saWIvY29yZS9tZXNzYWdlLnNlcnZpY2UudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEsT0FBTyxFQUFFLFlBQVksRUFBRSxVQUFVLEVBQUUsTUFBTSxlQUFlLENBQUM7O0FBRXpELE1BQU0sT0FBTyxZQUFZO0NBSXhCO0FBQ0QsSUFBSyxPQUtKO0FBTEQsV0FBSyxPQUFPO0lBQ1IsaUNBQVksQ0FBQTtJQUNaLCtDQUFnQixDQUFBO0lBQ2hCLGdDQUFXLENBQUE7SUFDWCxtQ0FBYyxDQUFBO0FBQ2xCLENBQUMsRUFMSSxPQUFPLEtBQVAsT0FBTyxRQUtYO0FBS0QsTUFBTSxPQUFPLGNBQWM7SUFIM0I7UUFJb0IsbUJBQWMsR0FBMEIsSUFBSSxZQUFZLEVBQVcsQ0FBQztRQUNwRSxpQkFBWSxHQUErQixJQUFJLFlBQVksRUFBZ0IsQ0FBQztLQTZDL0Y7SUEzQ1UsV0FBVztRQUNkLElBQUksQ0FBQyxjQUFjLENBQUMsSUFBSSxDQUFDLEtBQUssQ0FBQyxDQUFDO0lBQ3BDLENBQUM7SUFFTSxXQUFXO1FBQ2QsSUFBSSxDQUFDLGNBQWMsQ0FBQyxJQUFJLENBQUMsSUFBSSxDQUFDLENBQUM7SUFDbkMsQ0FBQztJQUVNLE9BQU8sQ0FBQyxNQUFlLEVBQUUsVUFBa0IsU0FBUztRQUN2RCxNQUFNLE9BQU8sR0FBaUI7WUFDMUIsSUFBSSxFQUFFLE9BQU87WUFDYixLQUFLLEVBQUUsT0FBTyxDQUFDLE9BQU8sQ0FBQztZQUN2QixPQUFPLEVBQUUsTUFBTTtTQUNsQixDQUFDO1FBQ0YsSUFBSSxDQUFDLFlBQVksQ0FBQyxJQUFJLENBQUMsT0FBTyxDQUFDLENBQUM7SUFDcEMsQ0FBQztJQUVNLElBQUksQ0FBQyxNQUFjLEVBQUUsVUFBa0IsTUFBTTtRQUNoRCxNQUFNLE9BQU8sR0FBaUI7WUFDMUIsSUFBSSxFQUFFLE9BQU87WUFDYixLQUFLLEVBQUUsT0FBTyxDQUFDLE9BQU8sQ0FBQztZQUN2QixPQUFPLEVBQUUsTUFBTTtTQUNsQixDQUFDO1FBQ0YsSUFBSSxDQUFDLFlBQVksQ0FBQyxJQUFJLENBQUMsT0FBTyxDQUFDLENBQUM7SUFDcEMsQ0FBQztJQUVNLElBQUksQ0FBQyxNQUFjLEVBQUUsVUFBa0IsU0FBUztRQUNuRCxNQUFNLE9BQU8sR0FBaUI7WUFDMUIsSUFBSSxFQUFFLE9BQU87WUFDYixLQUFLLEVBQUUsT0FBTyxDQUFDLE9BQU8sQ0FBQztZQUN2QixPQUFPLEVBQUUsTUFBTTtTQUNsQixDQUFDO1FBQ0YsSUFBSSxDQUFDLFlBQVksQ0FBQyxJQUFJLENBQUMsT0FBTyxDQUFDLENBQUM7SUFDcEMsQ0FBQztJQUVNLEtBQUssQ0FBQyxNQUFjLEVBQUUsVUFBa0IsT0FBTztRQUNsRCxNQUFNLE9BQU8sR0FBaUI7WUFDMUIsSUFBSSxFQUFFLE9BQU87WUFDYixLQUFLLEVBQUUsT0FBTyxDQUFDLE9BQU8sQ0FBQztZQUN2QixPQUFPLEVBQUUsTUFBTTtTQUNsQixDQUFDO1FBQ0YsSUFBSSxDQUFDLFlBQVksQ0FBQyxJQUFJLENBQUMsT0FBTyxDQUFDLENBQUM7SUFDcEMsQ0FBQzs7MkdBOUNRLGNBQWM7K0dBQWQsY0FBYyxjQUZYLE1BQU07MkZBRVQsY0FBYztrQkFIMUIsVUFBVTttQkFBQztvQkFDUixVQUFVLEVBQUUsTUFBTTtpQkFDckIiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBFdmVudEVtaXR0ZXIsIEluamVjdGFibGUgfSBmcm9tICdAYW5ndWxhci9jb3JlJztcblxuZXhwb3J0IGNsYXNzIE1lc3NhZ2VNb2RlbCB7XG4gICAgcHVibGljIHR5cGU6ICdzdWNjZXNzJyB8ICdpbmZvJyB8ICd3YXJuaW5nJyB8ICdlcnJvcicgfCAnYmxhbmsnIHwgc3RyaW5nO1xuICAgIHB1YmxpYyB0aXRsZTogc3RyaW5nO1xuICAgIHB1YmxpYyBjb250ZW50OiBzdHJpbmc7XG59XG5lbnVtIE1zZ1R5cGUge1xuICAgIGVycm9yID0gJ+mUmeivrycsXG4gICAgc3VjY2VzcyA9ICfmk43kvZzmiJDlip8nLFxuICAgIGluZm8gPSAn5rOo5oSPJyxcbiAgICB3YXJuaW5nID0gJ+itpuWRiicsXG59XG5cbkBJbmplY3RhYmxlKHtcbiAgICBwcm92aWRlZEluOiAncm9vdCdcbn0pXG5leHBvcnQgY2xhc3MgTWVzc2FnZVNlcnZpY2Uge1xuICAgIHB1YmxpYyByZWFkb25seSBsb2FkaW5nU3ViamVjdDogRXZlbnRFbWl0dGVyPGJvb2xlYW4+ID0gbmV3IEV2ZW50RW1pdHRlcjxib29sZWFuPigpO1xuICAgIHB1YmxpYyByZWFkb25seSBncm93bFN1YmplY3Q6IEV2ZW50RW1pdHRlcjxNZXNzYWdlTW9kZWw+ID0gbmV3IEV2ZW50RW1pdHRlcjxNZXNzYWdlTW9kZWw+KCk7XG5cbiAgICBwdWJsaWMgc2hvd0xvYWRpbmcoKSB7XG4gICAgICAgIHRoaXMubG9hZGluZ1N1YmplY3QuZW1pdChmYWxzZSk7XG4gICAgfVxuXG4gICAgcHVibGljIGhpZGVMb2FkaW5nKCkge1xuICAgICAgICB0aGlzLmxvYWRpbmdTdWJqZWN0LmVtaXQodHJ1ZSk7XG4gICAgfVxuXG4gICAgcHVibGljIHN1Y2Nlc3MoZGV0YWlsPzogc3RyaW5nLCBzdW1tYXJ5OiBzdHJpbmcgPSAnc3VjY2VzcycpIHtcbiAgICAgICAgY29uc3QgY29udGVudDogTWVzc2FnZU1vZGVsID0ge1xuICAgICAgICAgICAgdHlwZTogc3VtbWFyeSxcbiAgICAgICAgICAgIHRpdGxlOiBNc2dUeXBlW3N1bW1hcnldLFxuICAgICAgICAgICAgY29udGVudDogZGV0YWlsXG4gICAgICAgIH07XG4gICAgICAgIHRoaXMuZ3Jvd2xTdWJqZWN0LmVtaXQoY29udGVudCk7XG4gICAgfVxuXG4gICAgcHVibGljIGluZm8oZGV0YWlsOiBzdHJpbmcsIHN1bW1hcnk6IHN0cmluZyA9ICdpbmZvJykge1xuICAgICAgICBjb25zdCBjb250ZW50OiBNZXNzYWdlTW9kZWwgPSB7XG4gICAgICAgICAgICB0eXBlOiBzdW1tYXJ5LFxuICAgICAgICAgICAgdGl0bGU6IE1zZ1R5cGVbc3VtbWFyeV0sXG4gICAgICAgICAgICBjb250ZW50OiBkZXRhaWxcbiAgICAgICAgfTtcbiAgICAgICAgdGhpcy5ncm93bFN1YmplY3QuZW1pdChjb250ZW50KTtcbiAgICB9XG5cbiAgICBwdWJsaWMgd2FybihkZXRhaWw6IHN0cmluZywgc3VtbWFyeTogc3RyaW5nID0gJ3dhcm5pbmcnKSB7XG4gICAgICAgIGNvbnN0IGNvbnRlbnQ6IE1lc3NhZ2VNb2RlbCA9IHtcbiAgICAgICAgICAgIHR5cGU6IHN1bW1hcnksXG4gICAgICAgICAgICB0aXRsZTogTXNnVHlwZVtzdW1tYXJ5XSxcbiAgICAgICAgICAgIGNvbnRlbnQ6IGRldGFpbFxuICAgICAgICB9O1xuICAgICAgICB0aGlzLmdyb3dsU3ViamVjdC5lbWl0KGNvbnRlbnQpO1xuICAgIH1cblxuICAgIHB1YmxpYyBlcnJvcihkZXRhaWw6IHN0cmluZywgc3VtbWFyeTogc3RyaW5nID0gJ2Vycm9yJykge1xuICAgICAgICBjb25zdCBjb250ZW50OiBNZXNzYWdlTW9kZWwgPSB7XG4gICAgICAgICAgICB0eXBlOiBzdW1tYXJ5LFxuICAgICAgICAgICAgdGl0bGU6IE1zZ1R5cGVbc3VtbWFyeV0sXG4gICAgICAgICAgICBjb250ZW50OiBkZXRhaWxcbiAgICAgICAgfTtcbiAgICAgICAgdGhpcy5ncm93bFN1YmplY3QuZW1pdChjb250ZW50KTtcbiAgICB9XG59XG4iXX0=