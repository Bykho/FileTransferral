import * as i0 from '@angular/core';
import { Component, NgModule, EventEmitter, Injectable, Input, ViewChild, Output, InjectionToken, Inject } from '@angular/core';
import anime from 'animejs';
import * as i1 from '@angular/router';
import { NavigationStart, NavigationEnd, NavigationCancel, NavigationError, Router } from '@angular/router';
import * as QRCode from 'qrious';
import { CommonModule } from '@angular/common';
import { HttpErrorResponse, HttpParams } from '@angular/common/http';
import { tap } from 'rxjs/operators';

class LoginBgComponent {
    constructor() {
        //
    }
    ngOnInit() {
        this.paths = Array.from(document.querySelector('svg.scene')
            .querySelectorAll('path'));
        this.paths.forEach((path) => {
            setTimeout(() => {
                anime({
                    targets: path,
                    duration: anime.random(3000, 5000),
                    easing: 'cubicBezier(.5, .05, .1, .3)',
                    d: path.getAttribute('pathdata:id'),
                    loop: true,
                    direction: 'alternate'
                });
            }, anime.random(0, 1000));
        });
    }
}
LoginBgComponent.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "15.0.1", ngImport: i0, type: LoginBgComponent, deps: [], target: i0.ɵɵFactoryTarget.Component });
LoginBgComponent.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "14.0.0", version: "15.0.1", type: LoginBgComponent, selector: "pz-login-bg", ngImport: i0, template: "<svg class=\"scene\" width=\"100%\" height=\"100vh\" preserveAspectRatio=\"none\" viewBox=\"0 0 1440 800\" xmlns:pathdata=\"http://www.codrops.com/\">\n    <path d=\"M -84.52,-81.13 C -94.62,-73.4 -88.88,-59.55 -90.33,-48.91 -89.29,27.31 -89.61,103.5 -88.33,179.8 -85.99,416.1 -81.32,888.9 -81.32,888.9 -81.32,888.9 974.5,888.7 1587,891.9 1518,719.9 1487,644 1429,533 1388,437.7 1447,259.7 1400,187 1362,132 1270,90.53 1207,39.93 1161,2.932 1071,-74.45 1071,-74.45 1071,-74.45 914.5,-77.77 848.2,-80.17 537.6,-80.84 227,-81.38 -83.6,-81.6 -83.91,-81.44 -84.21,-81.29 -84.52,-81.13 Z\" pathdata:id=\"M -84.52,-81.13 C -94.62,-73.4 -88.88,-59.55 -90.33,-48.91 -89.29,27.31 -89.61,103.5 -88.33,179.8 -85.99,416.1 -81.32,888.9 -81.32,888.9 -81.32,888.9 974.5,888.7 1587,891.9 1576,704.7 1517,625.7 1459,514.7 1418,419.4 1430,288.5 1382,187 1349,116.3 1296,54.47 1240,0.3429 1205,-33.51 1120,-83.59 1120,-83.59 1120,-83.59 914.5,-77.77 848.2,-80.17 537.6,-80.84 227,-81.38 -83.6,-81.6 -83.91,-81.44 -84.21,-81.29 -84.52,-81.13 Z\"></path>\n    <path d=\"M 665.2,-83.08 C 413.7,-81.89 162.2,-82.43 -89.29,-81.61 -90.35,164.3 -85.06,410.2 -84.09,656.1 -83.37,733.7 -82.64,811.3 -81.92,888.9 442.4,889.8 966.7,890.7 1491,891.6 1253,747.5 1417,429.4 1286,245.4 1227,163.2 1107,142.1 1043,64.54 1009,24.41 973,-76.01 973,-76.01 973,-76.01 706.6,-83.67 665.2,-83.08 Z\" pathdata:id=\"M 665.2,-83.08 C 413.7,-81.89 162.2,-82.43 -89.29,-81.61 -90.35,164.3 -85.06,410.2 -84.09,656.1 -83.37,733.7 -82.64,811.3 -81.92,888.9 442.4,889.8 966.7,890.7 1491,891.6 1253,747.5 1349,460.4 1243,260.6 1199,176.6 1145,96.92 1083,24.95 1050,-12.63 973,-76.01 973,-76.01 973,-76.01 706.6,-83.67 665.2,-83.08 Z\"></path>\n    <path d=\"M -85.01,-74.02 C -92.39,-66.64 -85.37,-55.79 -87.81,-46.91 -86.65,265.1 -84.66,577.2 -83.18,889.2 317.2,888.3 717.5,885.8 1118,890.4 1152,890.6 1187,890.9 1221,890 1219,768.3 1224,643.6 1187,526 1153,417 1091,319.3 1029,224.1 998.8,178.5 968.8,132.6 936.6,88.23 891.7,27.39 772.2,-78.96 772.2,-78.96 772.2,-78.96 222.1,-81.07 -85.01,-74.02 Z\" pathdata:id=\"M -85.01,-74.02 C -92.39,-66.64 -85.37,-55.79 -87.81,-46.91 -86.65,265.1 -84.66,577.2 -83.18,889.2 317.2,888.3 717.5,885.8 1118,890.4 1152,890.6 1187,890.9 1221,890 1219,768.3 1175,659.3 1150,544.3 1128,438.4 1143,312.6 1081,227.1 1004,121.1 925.8,114.8 851.3,54.73 762,-17.34 772.2,-78.96 772.2,-78.96 772.2,-78.96 222.1,-81.07 -85.01,-74.02 Z\"></path>\n    <path d=\"M -92.42,-79.11 C -89.97,243.8 -87.52,566.7 -85.07,889.6 201.8,889.9 488.7,889.9 775.5,895.6 880.4,896.9 985.2,894 1090,892.5 1064,773.3 1037,651.6 976.1,544.8 946.7,495.8 914.6,448.3 882,401.3 820.9,314.4 742.3,252 666.4,177.4 583.2,98.01 496.5,12.18 386.7,-23.38 328.4,-45.64 232.6,-81.38 232.6,-81.38 232.6,-81.38 9.82,-84.94 -92.42,-79.11 Z\" pathdata:id=\"M -92.42,-79.11 C -89.97,243.8 -87.52,566.7 -85.07,889.6 201.8,889.9 488.7,889.9 775.5,895.6 880.4,896.9 1063,889.5 1063,889.5 1063,889.5 1081,768.2 997.4,608.7 958.5,534.8 969.9,436.8 918.5,370.8 848.4,280.8 717,260.3 629.9,186.5 552.6,121.2 491.5,38.73 426.3,-38.61 412.9,-54.44 387.9,-87.47 387.9,-87.47 387.9,-87.47 9.82,-84.94 -92.42,-79.11 Z\"></path>\n    <path d=\"M -88.6,95.54 C -90.38,166.1 -88.23,236.7 -88.68,307.4 L -86.19,890 C 229.7,890.2 939.8,892.4 939.8,892.4 855.2,767 831,639.4 721.4,519.4 634.7,424.5 526.4,360.9 428.8,281.8 332.7,204 251.6,102.3 140.1,48.9 70.75,15.73 -24.82,24.2 -85.28,0.03 Z\" pathdata:id=\"M -88.6,95.54 C -90.38,166.1 -88.23,236.7 -88.68,307.4 L -86.19,890 C 229.7,890.2 939.8,892.4 939.8,892.4 906.9,734.7 779.3,676 721.4,519.4 676.8,398.8 566.5,307.1 458.9,236.6 355.2,168.7 220.3,165.7 107.8,113.5 40.05,82.12 -24.82,24.2 -85.28,0.03 Z\"></path>\n    <path d=\"M -95.69,252.3 -87.65,890.4 698.1,892 C 698.1,892 599.1,687.7 518.9,610.6 348,446.2 131.4,466.5 -95.69,252.3 Z\" pathdata:id=\"M -95.69,252.3 -87.65,890.4 698.1,892 C 698.1,892 569.8,587.1 448.9,482.7 299.7,353.9 131.4,466.5 -95.69,252.3 Z\"></path>\n    <path d=\"M -85.59,444.4 -85.59,890.6 489,895.6 C 489,895.6 436.8,745.3 382.5,690.8 258.1,565.8 57.98,629.2 -85.59,444.4 Z\" pathdata:id=\"M -85.59,444.4 -85.59,890.6 546.9,895.6 C 546.9,895.6 517.4,695.4 339.9,593.4 187.7,505.9 57.98,629.2 -85.59,444.4 Z\"></path>\n</svg>\n", styles: [".scene{background:#282886}.scene path:first-child{fill:#4f4fea}.scene path:nth-child(2){fill:#0c27cf}.scene path:nth-child(3){fill:#13269c}.scene path:nth-child(4){fill:#242468}.scene path:nth-child(5){fill:#2648e6}.scene path:nth-child(6){fill:#2c31b0}.scene path:nth-child(7){fill:#262689}\n"] });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "15.0.1", ngImport: i0, type: LoginBgComponent, decorators: [{
            type: Component,
            args: [{ selector: 'pz-login-bg', template: "<svg class=\"scene\" width=\"100%\" height=\"100vh\" preserveAspectRatio=\"none\" viewBox=\"0 0 1440 800\" xmlns:pathdata=\"http://www.codrops.com/\">\n    <path d=\"M -84.52,-81.13 C -94.62,-73.4 -88.88,-59.55 -90.33,-48.91 -89.29,27.31 -89.61,103.5 -88.33,179.8 -85.99,416.1 -81.32,888.9 -81.32,888.9 -81.32,888.9 974.5,888.7 1587,891.9 1518,719.9 1487,644 1429,533 1388,437.7 1447,259.7 1400,187 1362,132 1270,90.53 1207,39.93 1161,2.932 1071,-74.45 1071,-74.45 1071,-74.45 914.5,-77.77 848.2,-80.17 537.6,-80.84 227,-81.38 -83.6,-81.6 -83.91,-81.44 -84.21,-81.29 -84.52,-81.13 Z\" pathdata:id=\"M -84.52,-81.13 C -94.62,-73.4 -88.88,-59.55 -90.33,-48.91 -89.29,27.31 -89.61,103.5 -88.33,179.8 -85.99,416.1 -81.32,888.9 -81.32,888.9 -81.32,888.9 974.5,888.7 1587,891.9 1576,704.7 1517,625.7 1459,514.7 1418,419.4 1430,288.5 1382,187 1349,116.3 1296,54.47 1240,0.3429 1205,-33.51 1120,-83.59 1120,-83.59 1120,-83.59 914.5,-77.77 848.2,-80.17 537.6,-80.84 227,-81.38 -83.6,-81.6 -83.91,-81.44 -84.21,-81.29 -84.52,-81.13 Z\"></path>\n    <path d=\"M 665.2,-83.08 C 413.7,-81.89 162.2,-82.43 -89.29,-81.61 -90.35,164.3 -85.06,410.2 -84.09,656.1 -83.37,733.7 -82.64,811.3 -81.92,888.9 442.4,889.8 966.7,890.7 1491,891.6 1253,747.5 1417,429.4 1286,245.4 1227,163.2 1107,142.1 1043,64.54 1009,24.41 973,-76.01 973,-76.01 973,-76.01 706.6,-83.67 665.2,-83.08 Z\" pathdata:id=\"M 665.2,-83.08 C 413.7,-81.89 162.2,-82.43 -89.29,-81.61 -90.35,164.3 -85.06,410.2 -84.09,656.1 -83.37,733.7 -82.64,811.3 -81.92,888.9 442.4,889.8 966.7,890.7 1491,891.6 1253,747.5 1349,460.4 1243,260.6 1199,176.6 1145,96.92 1083,24.95 1050,-12.63 973,-76.01 973,-76.01 973,-76.01 706.6,-83.67 665.2,-83.08 Z\"></path>\n    <path d=\"M -85.01,-74.02 C -92.39,-66.64 -85.37,-55.79 -87.81,-46.91 -86.65,265.1 -84.66,577.2 -83.18,889.2 317.2,888.3 717.5,885.8 1118,890.4 1152,890.6 1187,890.9 1221,890 1219,768.3 1224,643.6 1187,526 1153,417 1091,319.3 1029,224.1 998.8,178.5 968.8,132.6 936.6,88.23 891.7,27.39 772.2,-78.96 772.2,-78.96 772.2,-78.96 222.1,-81.07 -85.01,-74.02 Z\" pathdata:id=\"M -85.01,-74.02 C -92.39,-66.64 -85.37,-55.79 -87.81,-46.91 -86.65,265.1 -84.66,577.2 -83.18,889.2 317.2,888.3 717.5,885.8 1118,890.4 1152,890.6 1187,890.9 1221,890 1219,768.3 1175,659.3 1150,544.3 1128,438.4 1143,312.6 1081,227.1 1004,121.1 925.8,114.8 851.3,54.73 762,-17.34 772.2,-78.96 772.2,-78.96 772.2,-78.96 222.1,-81.07 -85.01,-74.02 Z\"></path>\n    <path d=\"M -92.42,-79.11 C -89.97,243.8 -87.52,566.7 -85.07,889.6 201.8,889.9 488.7,889.9 775.5,895.6 880.4,896.9 985.2,894 1090,892.5 1064,773.3 1037,651.6 976.1,544.8 946.7,495.8 914.6,448.3 882,401.3 820.9,314.4 742.3,252 666.4,177.4 583.2,98.01 496.5,12.18 386.7,-23.38 328.4,-45.64 232.6,-81.38 232.6,-81.38 232.6,-81.38 9.82,-84.94 -92.42,-79.11 Z\" pathdata:id=\"M -92.42,-79.11 C -89.97,243.8 -87.52,566.7 -85.07,889.6 201.8,889.9 488.7,889.9 775.5,895.6 880.4,896.9 1063,889.5 1063,889.5 1063,889.5 1081,768.2 997.4,608.7 958.5,534.8 969.9,436.8 918.5,370.8 848.4,280.8 717,260.3 629.9,186.5 552.6,121.2 491.5,38.73 426.3,-38.61 412.9,-54.44 387.9,-87.47 387.9,-87.47 387.9,-87.47 9.82,-84.94 -92.42,-79.11 Z\"></path>\n    <path d=\"M -88.6,95.54 C -90.38,166.1 -88.23,236.7 -88.68,307.4 L -86.19,890 C 229.7,890.2 939.8,892.4 939.8,892.4 855.2,767 831,639.4 721.4,519.4 634.7,424.5 526.4,360.9 428.8,281.8 332.7,204 251.6,102.3 140.1,48.9 70.75,15.73 -24.82,24.2 -85.28,0.03 Z\" pathdata:id=\"M -88.6,95.54 C -90.38,166.1 -88.23,236.7 -88.68,307.4 L -86.19,890 C 229.7,890.2 939.8,892.4 939.8,892.4 906.9,734.7 779.3,676 721.4,519.4 676.8,398.8 566.5,307.1 458.9,236.6 355.2,168.7 220.3,165.7 107.8,113.5 40.05,82.12 -24.82,24.2 -85.28,0.03 Z\"></path>\n    <path d=\"M -95.69,252.3 -87.65,890.4 698.1,892 C 698.1,892 599.1,687.7 518.9,610.6 348,446.2 131.4,466.5 -95.69,252.3 Z\" pathdata:id=\"M -95.69,252.3 -87.65,890.4 698.1,892 C 698.1,892 569.8,587.1 448.9,482.7 299.7,353.9 131.4,466.5 -95.69,252.3 Z\"></path>\n    <path d=\"M -85.59,444.4 -85.59,890.6 489,895.6 C 489,895.6 436.8,745.3 382.5,690.8 258.1,565.8 57.98,629.2 -85.59,444.4 Z\" pathdata:id=\"M -85.59,444.4 -85.59,890.6 546.9,895.6 C 546.9,895.6 517.4,695.4 339.9,593.4 187.7,505.9 57.98,629.2 -85.59,444.4 Z\"></path>\n</svg>\n", styles: [".scene{background:#282886}.scene path:first-child{fill:#4f4fea}.scene path:nth-child(2){fill:#0c27cf}.scene path:nth-child(3){fill:#13269c}.scene path:nth-child(4){fill:#242468}.scene path:nth-child(5){fill:#2648e6}.scene path:nth-child(6){fill:#2c31b0}.scene path:nth-child(7){fill:#262689}\n"] }]
        }], ctorParameters: function () { return []; } });

class LoginBgModule {
}
LoginBgModule.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "15.0.1", ngImport: i0, type: LoginBgModule, deps: [], target: i0.ɵɵFactoryTarget.NgModule });
LoginBgModule.ɵmod = i0.ɵɵngDeclareNgModule({ minVersion: "14.0.0", version: "15.0.1", ngImport: i0, type: LoginBgModule, declarations: [LoginBgComponent], exports: [LoginBgComponent] });
LoginBgModule.ɵinj = i0.ɵɵngDeclareInjector({ minVersion: "12.0.0", version: "15.0.1", ngImport: i0, type: LoginBgModule });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "15.0.1", ngImport: i0, type: LoginBgModule, decorators: [{
            type: NgModule,
            args: [{
                    declarations: [LoginBgComponent],
                    exports: [LoginBgComponent]
                }]
        }] });

class MessageModel {
}
var MsgType;
(function (MsgType) {
    MsgType["error"] = "\u9519\u8BEF";
    MsgType["success"] = "\u64CD\u4F5C\u6210\u529F";
    MsgType["info"] = "\u6CE8\u610F";
    MsgType["warning"] = "\u8B66\u544A";
})(MsgType || (MsgType = {}));
class MessageService {
    constructor() {
        this.loadingSubject = new EventEmitter();
        this.growlSubject = new EventEmitter();
    }
    showLoading() {
        this.loadingSubject.emit(false);
    }
    hideLoading() {
        this.loadingSubject.emit(true);
    }
    success(detail, summary = 'success') {
        const content = {
            type: summary,
            title: MsgType[summary],
            content: detail
        };
        this.growlSubject.emit(content);
    }
    info(detail, summary = 'info') {
        const content = {
            type: summary,
            title: MsgType[summary],
            content: detail
        };
        this.growlSubject.emit(content);
    }
    warn(detail, summary = 'warning') {
        const content = {
            type: summary,
            title: MsgType[summary],
            content: detail
        };
        this.growlSubject.emit(content);
    }
    error(detail, summary = 'error') {
        const content = {
            type: summary,
            title: MsgType[summary],
            content: detail
        };
        this.growlSubject.emit(content);
    }
}
MessageService.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "15.0.1", ngImport: i0, type: MessageService, deps: [], target: i0.ɵɵFactoryTarget.Injectable });
MessageService.ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: "12.0.0", version: "15.0.1", ngImport: i0, type: MessageService, providedIn: 'root' });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "15.0.1", ngImport: i0, type: MessageService, decorators: [{
            type: Injectable,
            args: [{
                    providedIn: 'root'
                }]
        }] });

class LoadingComponent {
    constructor(router, msg) {
        this.router = router;
        this.msg = msg;
        this.hide = true;
        this.msg.loadingSubject.subscribe((v) => {
            this.hide = v;
        });
        this.router.events.subscribe((event) => {
            // show loading
            if (event instanceof NavigationStart) {
                this.hide = false;
            }
            if (event instanceof NavigationEnd ||
                event instanceof NavigationCancel ||
                event instanceof NavigationError) {
                setTimeout(() => {
                    this.hide = true;
                }, 100);
            }
        });
    }
}
LoadingComponent.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "15.0.1", ngImport: i0, type: LoadingComponent, deps: [{ token: i1.Router }, { token: MessageService }], target: i0.ɵɵFactoryTarget.Component });
LoadingComponent.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "14.0.0", version: "15.0.1", type: LoadingComponent, selector: "pz-loading", inputs: { hide: "hide" }, ngImport: i0, template: `
    <div class="spinner" [hidden]="hide">
      <div></div>
    </div>
  `, isInline: true, styles: ["@keyframes spin{0%{transform:rotate(0)}to{transform:rotate(360deg)}}.spinner{position:fixed;top:0;left:0;width:100%;height:100%;z-index:1003;background:rgba(0,0,0,.8);overflow:hidden}.spinner div:first-child{display:block;position:relative;left:50%;top:50%;width:150px;height:150px;margin:-75px 0 0 -75px;border-radius:50%;box-shadow:0 3px 3px #ff386a;transform:translateZ(0);animation:spin 2s linear infinite}.spinner div:first-child:after,.spinner div:first-child:before{content:\"\";position:absolute;border-radius:50%}.spinner div:first-child:before{inset:5px;box-shadow:0 3px 3px #ffe420;animation:spin 3s linear infinite}.spinner div:first-child:after{inset:15px;box-shadow:0 3px 3px #3dafff;animation:spin 1.5s linear infinite}\n"] });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "15.0.1", ngImport: i0, type: LoadingComponent, decorators: [{
            type: Component,
            args: [{ selector: 'pz-loading', template: `
    <div class="spinner" [hidden]="hide">
      <div></div>
    </div>
  `, styles: ["@keyframes spin{0%{transform:rotate(0)}to{transform:rotate(360deg)}}.spinner{position:fixed;top:0;left:0;width:100%;height:100%;z-index:1003;background:rgba(0,0,0,.8);overflow:hidden}.spinner div:first-child{display:block;position:relative;left:50%;top:50%;width:150px;height:150px;margin:-75px 0 0 -75px;border-radius:50%;box-shadow:0 3px 3px #ff386a;transform:translateZ(0);animation:spin 2s linear infinite}.spinner div:first-child:after,.spinner div:first-child:before{content:\"\";position:absolute;border-radius:50%}.spinner div:first-child:before{inset:5px;box-shadow:0 3px 3px #ffe420;animation:spin 3s linear infinite}.spinner div:first-child:after{inset:15px;box-shadow:0 3px 3px #3dafff;animation:spin 1.5s linear infinite}\n"] }]
        }], ctorParameters: function () { return [{ type: i1.Router }, { type: MessageService }]; }, propDecorators: { hide: [{
                type: Input
            }] } });

class LoadingModule {
}
LoadingModule.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "15.0.1", ngImport: i0, type: LoadingModule, deps: [], target: i0.ɵɵFactoryTarget.NgModule });
LoadingModule.ɵmod = i0.ɵɵngDeclareNgModule({ minVersion: "14.0.0", version: "15.0.1", ngImport: i0, type: LoadingModule, declarations: [LoadingComponent], exports: [LoadingComponent] });
LoadingModule.ɵinj = i0.ɵɵngDeclareInjector({ minVersion: "12.0.0", version: "15.0.1", ngImport: i0, type: LoadingModule });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "15.0.1", ngImport: i0, type: LoadingModule, decorators: [{
            type: NgModule,
            args: [{
                    declarations: [LoadingComponent],
                    exports: [LoadingComponent]
                }]
        }] });

class QrCodeComponent {
    constructor() {
        //
    }
    set content(content) {
        this.createQrcode(content);
    }
    ngOnInit() {
    }
    createQrcode(content) {
        const qr = new QRCode({
            element: this.ele.nativeElement,
            value: `${content}`
        });
        // 二维码的误差校正级别(L, M, Q, H)
        qr.level = 'M';
        qr.size = 70;
    }
}
QrCodeComponent.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "15.0.1", ngImport: i0, type: QrCodeComponent, deps: [], target: i0.ɵɵFactoryTarget.Component });
QrCodeComponent.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "14.0.0", version: "15.0.1", type: QrCodeComponent, selector: "pz-qr-code", inputs: { content: "content" }, viewQueries: [{ propertyName: "ele", first: true, predicate: ["qr"], descendants: true, static: true }], ngImport: i0, template: "<canvas #qr></canvas>\n" });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "15.0.1", ngImport: i0, type: QrCodeComponent, decorators: [{
            type: Component,
            args: [{ selector: 'pz-qr-code', template: "<canvas #qr></canvas>\n" }]
        }], ctorParameters: function () { return []; }, propDecorators: { content: [{
                type: Input
            }], ele: [{
                type: ViewChild,
                args: ['qr', { static: true }]
            }] } });

class QrCodeModule {
}
QrCodeModule.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "15.0.1", ngImport: i0, type: QrCodeModule, deps: [], target: i0.ɵɵFactoryTarget.NgModule });
QrCodeModule.ɵmod = i0.ɵɵngDeclareNgModule({ minVersion: "14.0.0", version: "15.0.1", ngImport: i0, type: QrCodeModule, declarations: [QrCodeComponent], imports: [CommonModule], exports: [QrCodeComponent] });
QrCodeModule.ɵinj = i0.ɵɵngDeclareInjector({ minVersion: "12.0.0", version: "15.0.1", ngImport: i0, type: QrCodeModule, imports: [CommonModule] });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "15.0.1", ngImport: i0, type: QrCodeModule, decorators: [{
            type: NgModule,
            args: [{
                    imports: [
                        CommonModule
                    ],
                    exports: [
                        QrCodeComponent
                    ],
                    declarations: [
                        QrCodeComponent
                    ]
                }]
        }] });

function getRandomNumberByRange(start, end) {
    return Math.round(Math.random() * (end - start) + start);
}
function createCanvas(width, height) {
    const canvas = createElement('canvas');
    canvas.width = width;
    canvas.height = height;
    return canvas;
}
function createImg(onload) {
    const img = createElement('img');
    img.crossOrigin = 'Anonymous';
    img.onload = onload;
    img.onerror = () => {
        img.src = getRandomImg();
    };
    img.src = getRandomImg();
    return img;
}
function createElement(tagName) {
    return document.createElement(tagName);
}
function addClass(tag, className) {
    tag.classList.add(className);
}
function removeClass(tag, className) {
    tag.classList.remove(className);
}
function getRandomImg() {
    return 'https://picsum.photos/300/150/?image=' + getRandomNumberByRange(0, 100);
}
function sum(x, y) {
    return x + y;
}
function square(x) {
    return x * x;
}
class VerifyComponent {
    constructor() {
        this.sideWidth = 300;
        this.sideHeight = 150;
        this.sideRadius = 10;
        this.sideLength = 42;
        this.submit = new EventEmitter();
        //
    }
    ngOnInit() {
        this.init();
    }
    draw(ctx, operation, x, y) {
        const l = this.sideLength;
        const PI = Math.PI;
        const r = this.sideRadius;
        ctx.beginPath();
        ctx.moveTo(x, y);
        ctx.lineTo(x + l / 2, y);
        ctx.arc(x + l / 2, y - r + 2, r, 0, 2 * PI);
        ctx.lineTo(x + l / 2, y);
        ctx.lineTo(x + l, y);
        ctx.lineTo(x + l, y + l / 2);
        ctx.arc(x + l + r - 2, y + l / 2, r, 0, 2 * PI);
        ctx.lineTo(x + l, y + l / 2);
        ctx.lineTo(x + l, y + l);
        ctx.lineTo(x, y + l);
        ctx.lineTo(x, y);
        ctx.fillStyle = '#fff';
        ctx[operation]();
        ctx.beginPath();
        ctx.arc(x, y + l / 2, r, 1.5 * PI, 0.5 * PI);
        ctx.globalCompositeOperation = 'xor';
        ctx.fill();
    }
    init() {
        this.reallyLength = this.sideLength + this.sideRadius * 2;
        this.root = document.getElementById('verify');
        this.initDOM();
        this.initImg();
        this.drawPic();
        this.bindEvents();
    }
    initDOM() {
        const canvas = createCanvas(this.sideWidth, this.sideHeight); // 画布
        const block = canvas.cloneNode(true); // 滑块
        const sliderContainer = createElement('div');
        const refreshIcon = createElement('div');
        const sliderMask = createElement('div');
        const slider = createElement('div');
        const sliderIcon = createElement('span');
        const text = createElement('span');
        block.className = 'block';
        sliderContainer.className = 'sliderContainer';
        refreshIcon.className = 'refreshIcon';
        refreshIcon.innerHTML = '<svg viewBox="64 64 896 896" fill="currentColor"\ ' +
            'width="1em" height="1em" data-icon="redo" aria-hidden="true">' +
            '<path d="M758.2 839.1C851.8 765.9 912 651.9 912 523.9 912 303 733.5' +
            ' 124.3 512.6 124 291.4 123.7 112 302.8 112 523.9c0 125.2 57.5 236.9' +
            ' 147.6 310.2 3.5 2.8 8.6 2.2 11.4-1.3l39.4-50.5c2.7-3.4' +
            ' 2.1-8.3-1.2-11.1-8.1-6.6-15.9-13.7-23.4-21.2a318.64 318.64' +
            ' 0 0 1-68.6-101.7C200.4 609 192 567.1 192 523.9s8.4-85.1' +
            ' 25.1-124.5c16.1-38.1 39.2-72.3 68.6-101.7 29.4-29.4 63.6-52.5' +
            ' 101.7-68.6C426.9 212.4 468.8 204 512 204s85.1 8.4 124.5' +
            ' 25.1c38.1 16.1 72.3 39.2 101.7 68.6 29.4 29.4 52.5 63.6' +
            ' 68.6 101.7 16.7 39.4 25.1 81.3 25.1 124.5s-8.4 85.1-25.1' +
            ' 124.5a318.64 318.64 0 0 1-68.6 101.7c-9.3 9.3-19.1 18-29.3' +
            ' 26L668.2 724a8 8 0 0 0-14.1 3l-39.6 162.2c-1.2 5 2.6 9.9 7.7' +
            ' 9.9l167 .8c6.7 0 10.5-7.7 6.3-12.9l-37.3-47.9z"></path>' +
            '</svg>';
        sliderMask.className = 'sliderMask';
        slider.className = 'slider';
        sliderIcon.className = 'sliderIcon';
        sliderIcon.innerHTML = '<svg viewBox="64 64 896 896" fill="currentColor" width="1em" ' +
            'height="1em" data-icon="arrow-right" aria-hidden="true"><path d="M869 487.8L491.2 ' +
            '159.9c-2.9-2.5-6.6-3.9-10.5-3.9h-88.5c-7.4 0-10.8 9.2-5.2 14l350.2 304H152c-4.4 0-8 ' +
            '3.6-8 8v60c0 4.4 3.6 8 8 8h585.1L386.9 854c-5.6 4.9-2.2 14 5.2 14h91.5c1.9 0 3.8-.7 ' +
            '5.2-2L869 536.2a32.07 32.07 0 0 0 0-48.4z"></path></svg>';
        text.innerHTML = '<svg viewBox="0 0 300 40">' +
            '  <linearGradient id="gr-radial"  x1="0%" y1="0%" x2="100%" y2="0%">' +
            '      <stop stop-color="#333" offset="0%"/>' +
            '      <stop stop-opacity="0.1" offset="50%">' +
            '          <animate attributeName="offset" from="0" to="1.3"' +
            '           dur="3s" repeatCount="indefinite" />' +
            '      </stop>' +
            '      <stop stop-color="#333" offset="100%"/>' +
            '  </linearGradient>' +
            '  <text text-anchor="middle" x="50%" y="50%" dy="5px"' +
            '  style="font-size:12pt; fill: url(#gr-radial)">向右滑动滑块填充拼图</text>' +
            '</svg>';
        text.className = 'sliderText';
        const el = this.root;
        el.appendChild(canvas);
        el.appendChild(refreshIcon);
        el.appendChild(block);
        slider.appendChild(sliderIcon);
        sliderMask.appendChild(slider);
        sliderContainer.appendChild(sliderMask);
        sliderContainer.appendChild(text);
        el.appendChild(sliderContainer);
        Object.assign(this, {
            canvas,
            block,
            sliderContainer,
            refreshIcon,
            slider,
            sliderMask,
            sliderIcon,
            text,
            canvasCtx: canvas.getContext('2d'),
            blockCtx: block.getContext('2d')
        });
    }
    initImg() {
        const img = createImg(() => {
            this.canvasCtx.drawImage(img, 0, 0, this.sideWidth, this.sideHeight);
            this.blockCtx.drawImage(img, 0, 0, this.sideWidth, this.sideHeight);
            const y = this.yPos - this.sideRadius * 2 + 2;
            const imageData = this.blockCtx.getImageData(this.xPos, y, this.reallyLength, this.reallyLength);
            this.block.width = this.reallyLength;
            this.blockCtx.putImageData(imageData, 0, y);
        });
        this.img = img;
    }
    drawPic() {
        // 随机创建滑块的位置
        this.xPos = getRandomNumberByRange(this.reallyLength + 10, this.sideWidth - (this.reallyLength + 10));
        this.yPos = getRandomNumberByRange(10 + this.sideRadius * 2, this.sideHeight - (this.reallyLength + 10));
        this.draw(this.canvasCtx, 'fill', this.xPos, this.yPos);
        this.draw(this.blockCtx, 'clip', this.xPos, this.yPos);
    }
    clean() {
        this.canvasCtx.clearRect(0, 0, this.sideWidth, this.sideHeight);
        this.blockCtx.clearRect(0, 0, this.sideWidth, this.sideHeight);
        this.block.width = this.sideWidth;
    }
    bindEvents() {
        this.root.onselectstart = () => false;
        this.refreshIcon.onclick = () => {
            this.reset();
        };
        let originX, originY, isMouseDown = false;
        const trail = [];
        this.slider.addEventListener('mousedown', function (e) {
            originX = e.x;
            originY = e.y;
            isMouseDown = true;
        });
        document.addEventListener('mousemove', (e) => {
            if (!isMouseDown) {
                return false;
            }
            const moveX = e.x - originX;
            const moveY = e.y - originY;
            if (moveX < 0 || moveX + 38 >= this.sideWidth) {
                return false;
            }
            this.slider.style.left = moveX + 'px';
            const blockLeft = (this.sideWidth - 40 - 20) / (this.sideWidth - 40) * moveX;
            this.block.style.left = blockLeft + 'px';
            if (moveX) {
                addClass(this.sliderContainer, 'sliderContainer_active');
            }
            else {
                removeClass(this.sliderContainer, 'sliderContainer_active');
            }
            this.sliderMask.style.width = (moveX ? (moveX + 15) : moveX) + 'px';
            trail.push(moveY);
        });
        //
        document.addEventListener('mouseup', (e) => {
            if (!isMouseDown) {
                return false;
            }
            isMouseDown = false;
            if (e.x === originX) {
                return false;
            }
            removeClass(this.sliderContainer, 'sliderContainer_active');
            this.trail = trail;
            const { spliced, TuringTest } = this.verify();
            if (spliced) {
                if (TuringTest) {
                    addClass(this.sliderContainer, 'sliderContainer_success');
                    this.success();
                }
                else {
                    addClass(this.sliderContainer, 'sliderContainer_fail');
                    this.text.innerHTML = '再试一次';
                    this.reset();
                }
            }
            else {
                if (e.x - originX > 0) {
                    addClass(this.sliderContainer, 'sliderContainer_fail');
                    this.fail();
                    setTimeout(() => {
                        this.reset();
                    }, 1000);
                }
            }
        });
    }
    verify() {
        const arr = this.trail; // 拖动时y轴的移动距离
        const average = arr.reduce(sum) / arr.length; // 平均值
        const deviations = arr.map(x => x - average); // 偏差数组
        const stddev = Math.sqrt(deviations.map(square).reduce(sum) / arr.length); // 标准差
        const left = parseInt(this.block.style.left);
        return {
            spliced: Math.abs(left - this.xPos) < 10,
            TuringTest: average !== stddev, // 只是简单的验证拖动轨迹，相等时一般为0，表示可能非人为操作
        };
    }
    reset() {
        this.sliderContainer.className = 'sliderContainer';
        this.slider.style.left = 0;
        this.block.style.left = 0;
        this.sliderMask.style.width = 0;
        this.clean();
        this.img.src = getRandomImg();
        this.drawPic();
    }
    success() {
        this.submit.emit(true);
        setTimeout(() => this.reset(), 1000);
    }
    fail() {
        this.submit.emit(false);
    }
}
VerifyComponent.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "15.0.1", ngImport: i0, type: VerifyComponent, deps: [], target: i0.ɵɵFactoryTarget.Component });
VerifyComponent.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "14.0.0", version: "15.0.1", type: VerifyComponent, selector: "pz-verify", outputs: { submit: "submit" }, ngImport: i0, template: "<div id=\"verify\"></div>\n", styles: ["::ng-deep #verify{position:relative;width:300px}::ng-deep #verify canvas:first-child{border-radius:8px;background:rgba(255,255,255,.2)}::ng-deep #verify .block{position:absolute;left:0;top:0}::ng-deep #verify .sliderContainer{position:relative;text-align:center;width:300px;height:40px;line-height:40px;background:#f7f9fa;color:#45494c;border:1px solid #e4e7eb;border-radius:5px}::ng-deep #verify .sliderContainer_active .slider{top:-1px;height:38px}::ng-deep #verify .sliderContainer_active .sliderMask{height:38px;border-width:1px}::ng-deep #verify .sliderContainer_success .slider{height:38px;top:-1px;border:1px solid #52CCBA;background-color:#52ccba!important}::ng-deep #verify .sliderContainer_success .sliderMask{height:38px;border:1px solid #52CCBA;background-color:#d2f4ef}::ng-deep #verify .sliderContainer_success .sliderIcon{background-position:0 0!important}::ng-deep #verify .sliderContainer_fail .slider{top:-1px;height:38px;background-color:#f57a7a!important}::ng-deep #verify .sliderContainer_fail .sliderMask{height:38px;border:1px solid #f57a7a;background-color:#fce1e1}::ng-deep #verify .sliderContainer_fail .sliderIcon{background-position:0 -83px!important}::ng-deep #verify .sliderContainer_active .sliderText,::ng-deep #verify .sliderContainer_success .sliderText,::ng-deep #verify .sliderContainer_fail .sliderText{display:none}::ng-deep #verify .sliderMask{position:absolute;left:0;top:0;height:39px;border:0 solid #1991FA;background:#D1E9FE;border-radius:5px}::ng-deep #verify .slider{position:absolute;top:0;left:0;width:38px;height:38px;background:#fff;box-shadow:0 0 3px #0000004d;cursor:pointer;transition:background .2s linear;border-radius:5px}::ng-deep #verify .slider:hover{background:#1991FA}::ng-deep #verify .slider:hover .sliderIcon{color:#fff}::ng-deep #verify .sliderIcon{position:absolute;top:2px;left:12px;width:18px;height:18px}::ng-deep #verify .sliderIcon>svg{height:100%;width:100%}::ng-deep #verify .refreshIcon{color:#fff;position:absolute;right:0;top:0;width:25px;height:25px;cursor:pointer}::ng-deep #verify .refreshIcon>svg{height:90%;width:90%;transform:rotate(-180deg);opacity:.7}\n"] });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "15.0.1", ngImport: i0, type: VerifyComponent, decorators: [{
            type: Component,
            args: [{ selector: 'pz-verify', template: "<div id=\"verify\"></div>\n", styles: ["::ng-deep #verify{position:relative;width:300px}::ng-deep #verify canvas:first-child{border-radius:8px;background:rgba(255,255,255,.2)}::ng-deep #verify .block{position:absolute;left:0;top:0}::ng-deep #verify .sliderContainer{position:relative;text-align:center;width:300px;height:40px;line-height:40px;background:#f7f9fa;color:#45494c;border:1px solid #e4e7eb;border-radius:5px}::ng-deep #verify .sliderContainer_active .slider{top:-1px;height:38px}::ng-deep #verify .sliderContainer_active .sliderMask{height:38px;border-width:1px}::ng-deep #verify .sliderContainer_success .slider{height:38px;top:-1px;border:1px solid #52CCBA;background-color:#52ccba!important}::ng-deep #verify .sliderContainer_success .sliderMask{height:38px;border:1px solid #52CCBA;background-color:#d2f4ef}::ng-deep #verify .sliderContainer_success .sliderIcon{background-position:0 0!important}::ng-deep #verify .sliderContainer_fail .slider{top:-1px;height:38px;background-color:#f57a7a!important}::ng-deep #verify .sliderContainer_fail .sliderMask{height:38px;border:1px solid #f57a7a;background-color:#fce1e1}::ng-deep #verify .sliderContainer_fail .sliderIcon{background-position:0 -83px!important}::ng-deep #verify .sliderContainer_active .sliderText,::ng-deep #verify .sliderContainer_success .sliderText,::ng-deep #verify .sliderContainer_fail .sliderText{display:none}::ng-deep #verify .sliderMask{position:absolute;left:0;top:0;height:39px;border:0 solid #1991FA;background:#D1E9FE;border-radius:5px}::ng-deep #verify .slider{position:absolute;top:0;left:0;width:38px;height:38px;background:#fff;box-shadow:0 0 3px #0000004d;cursor:pointer;transition:background .2s linear;border-radius:5px}::ng-deep #verify .slider:hover{background:#1991FA}::ng-deep #verify .slider:hover .sliderIcon{color:#fff}::ng-deep #verify .sliderIcon{position:absolute;top:2px;left:12px;width:18px;height:18px}::ng-deep #verify .sliderIcon>svg{height:100%;width:100%}::ng-deep #verify .refreshIcon{color:#fff;position:absolute;right:0;top:0;width:25px;height:25px;cursor:pointer}::ng-deep #verify .refreshIcon>svg{height:90%;width:90%;transform:rotate(-180deg);opacity:.7}\n"] }]
        }], ctorParameters: function () { return []; }, propDecorators: { submit: [{
                type: Output
            }] } });

class VerifyModule {
}
VerifyModule.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "15.0.1", ngImport: i0, type: VerifyModule, deps: [], target: i0.ɵɵFactoryTarget.NgModule });
VerifyModule.ɵmod = i0.ɵɵngDeclareNgModule({ minVersion: "14.0.0", version: "15.0.1", ngImport: i0, type: VerifyModule, declarations: [VerifyComponent], exports: [VerifyComponent] });
VerifyModule.ɵinj = i0.ɵɵngDeclareInjector({ minVersion: "12.0.0", version: "15.0.1", ngImport: i0, type: VerifyModule });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "15.0.1", ngImport: i0, type: VerifyModule, decorators: [{
            type: NgModule,
            args: [{
                    declarations: [VerifyComponent],
                    exports: [VerifyComponent]
                }]
        }] });

class AppErrorHandler {
    constructor(injector, messageService, callBack) {
        this.injector = injector;
        this.messageService = messageService;
        this.callBack = callBack;
        this.handleRouterError();
    }
    handleError(error) {
        this.messageService.hideLoading();
        console.error(error);
        // NavigationError
        if (error.rejection && error.task && error.promise) {
            return;
        }
        if (error instanceof Error) {
            this.unhandledError(error);
            return;
        }
        if (error instanceof HttpErrorResponse) {
            this.handleHttpResponseError(error);
            return;
        }
    }
    unhandledError(error) {
        this.messageService.error(error.message.split(' ')[0]);
        this.callBack(error.message.split(' ')[1]);
    }
    // tslint:disable-next-line:cyclomatic-complexity
    handleHttpResponseError(error) {
        let currentError = error.error;
        if (currentError instanceof Error) {
            this.messageService.error(currentError.message);
            return;
        }
        if (currentError instanceof String || typeof currentError === 'string') {
            try {
                currentError = JSON.parse(currentError.toString());
            }
            catch (e) {
                //
            }
        }
        if (error.status <= 0) {
            setTimeout(() => {
                const router = this.injector.get(Router);
                router.navigate(['/error/navigation'], {
                    skipLocationChange: true,
                    queryParams: { url: '/', message: '请求api时出现网络错误! 请按F5键刷新页面重试!' },
                });
            });
            return;
        }
        if (error.status >= 400) {
            const translate = {
                400: '请求错误',
                401: '授权认证失败',
                403: '禁止访问',
                404: '资源未找到',
                405: '不支持该操作',
                422: '请求数据有误',
                500: '内部服务器错误',
                503: '网络故障'
            };
            let message = translate[error.status] || '未知错误!';
            if (currentError) {
                message = currentError.resultMsg || currentError;
                if (error.status >= 500) {
                    setTimeout(() => this.messageService.error(message));
                    return;
                }
                if (error.status !== 401) {
                    setTimeout(() => this.messageService.warn(message));
                    return;
                }
                else {
                    return;
                }
            }
            setTimeout(() => this.messageService.error(message));
            return;
        }
    }
    handleRouterError() {
        setTimeout(() => {
            const router = this.injector.get(Router);
            router.events.subscribe(event => {
                if (event instanceof NavigationError) {
                    const { url, error } = event;
                    const { message /*, stack*/ } = error;
                    router.navigate(['/error/navigation'], {
                        skipLocationChange: true,
                        queryParams: { url, message: message || error },
                    });
                }
            });
        });
    }
}
AppErrorHandler.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "15.0.1", ngImport: i0, type: AppErrorHandler, deps: "invalid", target: i0.ɵɵFactoryTarget.Injectable });
AppErrorHandler.ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: "12.0.0", version: "15.0.1", ngImport: i0, type: AppErrorHandler });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "15.0.1", ngImport: i0, type: AppErrorHandler, decorators: [{
            type: Injectable
        }], ctorParameters: function () { return [{ type: i0.Injector }, { type: MessageService }, { type: undefined }]; } });

class CanDeactivateGuard {
    canDeactivate(component) {
        return component.canDeactivate ? component.canDeactivate() : true;
    }
}
CanDeactivateGuard.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "15.0.1", ngImport: i0, type: CanDeactivateGuard, deps: [], target: i0.ɵɵFactoryTarget.Injectable });
CanDeactivateGuard.ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: "12.0.0", version: "15.0.1", ngImport: i0, type: CanDeactivateGuard });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "15.0.1", ngImport: i0, type: CanDeactivateGuard, decorators: [{
            type: Injectable
        }] });

var StorageType;
(function (StorageType) {
    StorageType[StorageType["localStorage"] = 0] = "localStorage";
    StorageType[StorageType["sessionStorage"] = 1] = "sessionStorage";
})(StorageType || (StorageType = {}));
const AUTH_CONFIG = new InjectionToken('auth-config', { providedIn: 'root', factory: AUTH_CONFIG_FACTORY });
function AUTH_CONFIG_FACTORY() {
    return new AuthConfig();
}
class AuthConfig {
    constructor() {
        this.storageType = StorageType.localStorage;
        this.storageName = 'oauthToken';
    }
}
class AuthConfigService {
    constructor(config) {
        this.config = config;
        this.defaultConfig = {
            storageType: StorageType.localStorage,
            storageName: 'oauthToken',
            baseUrl: '',
            clientId: 'VBL.Manage.End',
            scope: 'openid profile default-api',
            redirectUri: window.top.location.origin,
            profileUri: 'userinfo',
            logoutPath: '/',
            notAuthUrl: 'login,manage/user/mobile/',
            tokenType: 'token_type',
            accessToken: 'access_token',
            upperTokenType: true,
        };
        this.authConfig = { ...this.defaultConfig, ...this.config };
    }
    getStorage() {
        let storage;
        if (this.authConfig.storageType === StorageType.localStorage) {
            storage = localStorage;
        }
        else {
            storage = sessionStorage;
        }
        return storage;
    }
    getToken() {
        const dataString = this.getStorage()[this.authConfig.storageName];
        if (dataString) {
            const data = JSON.parse(dataString);
            if (data && data.expires_at && new Date(data.expires_at) >= new Date()) {
                return data;
            }
        }
        return null;
    }
    getAuthorizationHeader() {
        const token = this.getToken();
        if (token) {
            const tokenType = token.token_type;
            const accessToken = token.access_token;
            return `${this.config.upperTokenType ? tokenType[0].toUpperCase() : tokenType[0] + tokenType.substr(1)} ${accessToken}`;
        }
        return '';
    }
    setToken(data) {
        this.getStorage()[this.authConfig.storageName] = JSON.stringify(data);
    }
    removeToken() {
        delete this.getStorage()[this.authConfig.storageName];
    }
    login(tokenStr, remember = true) {
        const token = {};
        token[this.authConfig.tokenType] = 'bearer';
        token[this.authConfig.accessToken] = tokenStr;
        if (!remember) {
            this.authConfig.storageType = StorageType.sessionStorage;
        }
        else {
            const date = new Date();
            this.authConfig.storageType = StorageType.localStorage;
            token.expires_at = date.setDate(date.getDate() + 7);
        }
        this.setToken(token);
    }
    logout() {
        sessionStorage.clear();
        this.removeToken();
        window.top.location.href = `${this.authConfig.logoutPath}`;
    }
}
AuthConfigService.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "15.0.1", ngImport: i0, type: AuthConfigService, deps: [{ token: AUTH_CONFIG }], target: i0.ɵɵFactoryTarget.Injectable });
AuthConfigService.ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: "12.0.0", version: "15.0.1", ngImport: i0, type: AuthConfigService, providedIn: 'root' });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "15.0.1", ngImport: i0, type: AuthConfigService, decorators: [{
            type: Injectable,
            args: [{
                    providedIn: 'root'
                }]
        }], ctorParameters: function () { return [{ type: AuthConfig, decorators: [{
                    type: Inject,
                    args: [AUTH_CONFIG]
                }] }]; } });

const interceptorFactory = (config) => {
    return new CustomHttpInterceptor(config);
};
class CustomHttpInterceptor {
    constructor(authConfig) {
        this.authConfig = authConfig;
    }
    intercept(req, next) {
        let authReq = req;
        if (!(new RegExp(this.authConfig.authConfig.notAuthUrl.split(',').join('$|') + '$').test(req.url))) {
            // Get the auth header from the service.
            const authHeaderName = 'Authorization';
            // Clone the request to add the new header.
            authReq = req.clone({
                headers: req.headers.set(authHeaderName, this.authConfig.getAuthorizationHeader())
            });
        }
        // Pass on the cloned request instead of the original request.
        return next.handle(authReq).pipe(tap(() => {
            // if (event instanceof HttpResponse) {
            //     // do stuff with response if you want
            // }
        }, error => {
            // Remember, there may be other events besides just the response.
            if (error instanceof HttpErrorResponse) {
                if (error.status === 401) {
                    console.log('登陆过期');
                }
            }
            return;
        }));
    }
}
CustomHttpInterceptor.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "15.0.1", ngImport: i0, type: CustomHttpInterceptor, deps: [{ token: AuthConfigService }], target: i0.ɵɵFactoryTarget.Injectable });
CustomHttpInterceptor.ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: "12.0.0", version: "15.0.1", ngImport: i0, type: CustomHttpInterceptor });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "15.0.1", ngImport: i0, type: CustomHttpInterceptor, decorators: [{
            type: Injectable
        }], ctorParameters: function () { return [{ type: AuthConfigService }]; } });

// 密码中必须包含字母、数字、特殊字符，至少8个字符，最多30个字符。
const passwordComplexity = (control) => {
    const regex = new RegExp('(?=.*[0-9])(?=.*[a-zA-Z])(?=.*[^a-zA-Z0-9]).{8,30}');
    if (!control.value) {
        return { error: true, required: true };
    }
    else if (!regex.test(control.value)) {
        return { complexity: true, error: true };
    }
    return {};
};

/**
 * yyyy-MM-dd HH:mm:ss
 */
function formatDateTime(input) {
    const pad = (num) => num < 10 ? '0' + num : num;
    // disable check
    const date = new Date(input);
    // tslint:disable:prefer-template
    return date.getFullYear() +
        '-' + pad(date.getMonth() + 1) +
        '-' + pad(date.getDate()) +
        ' ' + pad(date.getHours()) +
        ':' + pad(date.getMinutes()) +
        ':' + pad(date.getSeconds());
    // tslint:enable:prefer-template
}
/**
 * yyyy-MM-dd
 */
function formatDate(input) {
    const pad = (num) => num < 10 ? '0' + num : num;
    // disable check
    const date = new Date(input);
    // tslint:disable:prefer-template
    return date.getFullYear() +
        '-' + pad(date.getMonth() + 1) +
        '-' + pad(date.getDate());
    // tslint:enable:prefer-template
}

/**
 * create HttpParams from key value object
 *
 */
const httpParamSerializer = (request) => {
    return new HttpParams({ fromString: toQueryString(request) });
};
/**
 * 复杂类型请使用json, 改用post
 * @example
 *      toQueryString({ a: 2, b: 'abc', c: true, d: false })        -> a=2&b=abc&c=true&d=false
 *      toQueryString({ a: 2, b: new Date() })                      -> yyyy-MM-dd HH:mm:ss
 *      toQueryString({ a: null, b: undefined, c: 1 })              -> a=&b=&c=1
 */
function toQueryString(fromObject) {
    const resultMap = new Map();
    Object.keys(fromObject).forEach(key => {
        const value = fromObject[key];
        if (value === null || value === undefined) {
            resultMap.set(key, ['']);
        }
        else if (Array.isArray(value)) {
            resultMap.set(key, value);
        }
        else if (value instanceof Date) {
            resultMap.set(key, [formatDateTime(value)]);
        }
        else {
            resultMap.set(key, [value]);
        }
    });
    return Array.from(resultMap.keys())
        .map(key => {
        const eKey = encodeURIComponent(key);
        return resultMap.get(key)
            .map(value => `${eKey}=${encodeURIComponent(value)}`)
            .join('&');
    })
        .join('&');
}

// tslint:disable
function md5(string) {
    function md5_RotateLeft(lValue, iShiftBits) {
        return lValue << iShiftBits | lValue >>> 32 - iShiftBits;
    }
    function md5_AddUnsigned(lX, lY) {
        let lX4;
        let lY4;
        let lX8;
        let lY8;
        let lResult;
        lX8 = (lX & 0x80000000);
        lY8 = (lY & 0x80000000);
        lX4 = (lX & 0x40000000);
        lY4 = (lY & 0x40000000);
        lResult = (lX & 0x3FFFFFFF) + (lY & 0x3FFFFFFF);
        if (!(lX4 & lY4)) {
            if (lX4 | lY4) {
                if (lResult & 0x40000000) {
                    return (lResult ^ 0xC0000000 ^ lX8 ^ lY8);
                }
                else {
                    return (lResult ^ 0x40000000 ^ lX8 ^ lY8);
                }
            }
            else {
                return (lResult ^ lX8 ^ lY8);
            }
        }
        else {
            return (lResult ^ 0x80000000 ^ lX8 ^ lY8);
        }
    }
    function md5_F(x, y, z) {
        return (x & y) | ((~x) & z);
    }
    function md5_G(x, y, z) {
        return (x & z) | (y & (~z));
    }
    function md5_H(x, y, z) {
        return (x ^ y ^ z);
    }
    function md5_I(x, y, z) {
        return (y ^ (x | (~z)));
    }
    function md5_FF(a, b, c, d, x, s, ac) {
        a = md5_AddUnsigned(a, md5_AddUnsigned(md5_AddUnsigned(md5_F(b, c, d), x), ac));
        return md5_AddUnsigned(md5_RotateLeft(a, s), b);
    }
    function md5_GG(a, b, c, d, x, s, ac) {
        a = md5_AddUnsigned(a, md5_AddUnsigned(md5_AddUnsigned(md5_G(b, c, d), x), ac));
        return md5_AddUnsigned(md5_RotateLeft(a, s), b);
    }
    function md5_HH(a, b, c, d, x, s, ac) {
        a = md5_AddUnsigned(a, md5_AddUnsigned(md5_AddUnsigned(md5_H(b, c, d), x), ac));
        return md5_AddUnsigned(md5_RotateLeft(a, s), b);
    }
    function md5_II(a, b, c, d, x, s, ac) {
        a = md5_AddUnsigned(a, md5_AddUnsigned(md5_AddUnsigned(md5_I(b, c, d), x), ac));
        return md5_AddUnsigned(md5_RotateLeft(a, s), b);
    }
    function md5_ConvertToWordArray(string) {
        let lWordCount;
        const lMessageLength = string.length;
        const lNumberOfWords_temp1 = lMessageLength + 8;
        const lNumberOfWords_temp2 = (lNumberOfWords_temp1 - (lNumberOfWords_temp1 % 64)) / 64;
        const lNumberOfWords = (lNumberOfWords_temp2 + 1) * 16;
        const lWordArray = Array(lNumberOfWords - 1);
        let lBytePosition = 0;
        let lByteCount = 0;
        while (lByteCount < lMessageLength) {
            lWordCount = (lByteCount - (lByteCount % 4)) / 4;
            lBytePosition = (lByteCount % 4) * 8;
            lWordArray[lWordCount] = (lWordArray[lWordCount] | (string.charCodeAt(lByteCount) << lBytePosition));
            lByteCount++;
        }
        lWordCount = (lByteCount - (lByteCount % 4)) / 4;
        lBytePosition = (lByteCount % 4) * 8;
        lWordArray[lWordCount] |= (0x80 << lBytePosition);
        lWordArray[lNumberOfWords - 2] = lMessageLength * 8;
        lWordArray[lNumberOfWords - 1] = lMessageLength >>> 29;
        return lWordArray;
    }
    function md5_WordToHex(lValue) {
        let WordToHexValue = '', WordToHexValue_temp = '', lByte, lCount;
        for (lCount = 0; lCount <= 3; lCount++) {
            lByte = (lValue >>> (lCount * 8)) & 255;
            WordToHexValue_temp = '0' + lByte.toString(16);
            WordToHexValue = WordToHexValue + WordToHexValue_temp.substr(WordToHexValue_temp.length - 2, 2);
        }
        return WordToHexValue;
    }
    function md5_Utf8Encode(string) {
        string = string.replace(/\r\n/g, '\n');
        let utftext = '';
        for (let n = 0; n < string.length; n++) {
            const c = string.charCodeAt(n);
            if (c < 128) {
                utftext += String.fromCharCode(c);
            }
            else if ((c > 127) && (c < 2048)) {
                utftext += String.fromCharCode((c >> 6) | 192);
                utftext += String.fromCharCode((c & 63) | 128);
            }
            else {
                utftext += String.fromCharCode((c >> 12) | 224);
                utftext += String.fromCharCode(((c >> 6) & 63) | 128);
                utftext += String.fromCharCode((c & 63) | 128);
            }
        }
        return utftext;
    }
    let x = Array();
    let k, AA, BB, CC, DD, a, b, c, d;
    const S11 = 7, S12 = 12, S13 = 17, S14 = 22;
    const S21 = 5, S22 = 9, S23 = 14, S24 = 20;
    const S31 = 4, S32 = 11, S33 = 16, S34 = 23;
    const S41 = 6, S42 = 10, S43 = 15, S44 = 21;
    string = md5_Utf8Encode(string);
    x = md5_ConvertToWordArray(string);
    a = 0x67452301;
    b = 0xEFCDAB89;
    c = 0x98BADCFE;
    d = 0x10325476;
    for (k = 0; k < x.length; k += 16) {
        AA = a;
        BB = b;
        CC = c;
        DD = d;
        a = md5_FF(a, b, c, d, x[k + 0], S11, 0xD76AA478);
        d = md5_FF(d, a, b, c, x[k + 1], S12, 0xE8C7B756);
        c = md5_FF(c, d, a, b, x[k + 2], S13, 0x242070DB);
        b = md5_FF(b, c, d, a, x[k + 3], S14, 0xC1BDCEEE);
        a = md5_FF(a, b, c, d, x[k + 4], S11, 0xF57C0FAF);
        d = md5_FF(d, a, b, c, x[k + 5], S12, 0x4787C62A);
        c = md5_FF(c, d, a, b, x[k + 6], S13, 0xA8304613);
        b = md5_FF(b, c, d, a, x[k + 7], S14, 0xFD469501);
        a = md5_FF(a, b, c, d, x[k + 8], S11, 0x698098D8);
        d = md5_FF(d, a, b, c, x[k + 9], S12, 0x8B44F7AF);
        c = md5_FF(c, d, a, b, x[k + 10], S13, 0xFFFF5BB1);
        b = md5_FF(b, c, d, a, x[k + 11], S14, 0x895CD7BE);
        a = md5_FF(a, b, c, d, x[k + 12], S11, 0x6B901122);
        d = md5_FF(d, a, b, c, x[k + 13], S12, 0xFD987193);
        c = md5_FF(c, d, a, b, x[k + 14], S13, 0xA679438E);
        b = md5_FF(b, c, d, a, x[k + 15], S14, 0x49B40821);
        a = md5_GG(a, b, c, d, x[k + 1], S21, 0xF61E2562);
        d = md5_GG(d, a, b, c, x[k + 6], S22, 0xC040B340);
        c = md5_GG(c, d, a, b, x[k + 11], S23, 0x265E5A51);
        b = md5_GG(b, c, d, a, x[k + 0], S24, 0xE9B6C7AA);
        a = md5_GG(a, b, c, d, x[k + 5], S21, 0xD62F105D);
        d = md5_GG(d, a, b, c, x[k + 10], S22, 0x2441453);
        c = md5_GG(c, d, a, b, x[k + 15], S23, 0xD8A1E681);
        b = md5_GG(b, c, d, a, x[k + 4], S24, 0xE7D3FBC8);
        a = md5_GG(a, b, c, d, x[k + 9], S21, 0x21E1CDE6);
        d = md5_GG(d, a, b, c, x[k + 14], S22, 0xC33707D6);
        c = md5_GG(c, d, a, b, x[k + 3], S23, 0xF4D50D87);
        b = md5_GG(b, c, d, a, x[k + 8], S24, 0x455A14ED);
        a = md5_GG(a, b, c, d, x[k + 13], S21, 0xA9E3E905);
        d = md5_GG(d, a, b, c, x[k + 2], S22, 0xFCEFA3F8);
        c = md5_GG(c, d, a, b, x[k + 7], S23, 0x676F02D9);
        b = md5_GG(b, c, d, a, x[k + 12], S24, 0x8D2A4C8A);
        a = md5_HH(a, b, c, d, x[k + 5], S31, 0xFFFA3942);
        d = md5_HH(d, a, b, c, x[k + 8], S32, 0x8771F681);
        c = md5_HH(c, d, a, b, x[k + 11], S33, 0x6D9D6122);
        b = md5_HH(b, c, d, a, x[k + 14], S34, 0xFDE5380C);
        a = md5_HH(a, b, c, d, x[k + 1], S31, 0xA4BEEA44);
        d = md5_HH(d, a, b, c, x[k + 4], S32, 0x4BDECFA9);
        c = md5_HH(c, d, a, b, x[k + 7], S33, 0xF6BB4B60);
        b = md5_HH(b, c, d, a, x[k + 10], S34, 0xBEBFBC70);
        a = md5_HH(a, b, c, d, x[k + 13], S31, 0x289B7EC6);
        d = md5_HH(d, a, b, c, x[k + 0], S32, 0xEAA127FA);
        c = md5_HH(c, d, a, b, x[k + 3], S33, 0xD4EF3085);
        b = md5_HH(b, c, d, a, x[k + 6], S34, 0x4881D05);
        a = md5_HH(a, b, c, d, x[k + 9], S31, 0xD9D4D039);
        d = md5_HH(d, a, b, c, x[k + 12], S32, 0xE6DB99E5);
        c = md5_HH(c, d, a, b, x[k + 15], S33, 0x1FA27CF8);
        b = md5_HH(b, c, d, a, x[k + 2], S34, 0xC4AC5665);
        a = md5_II(a, b, c, d, x[k + 0], S41, 0xF4292244);
        d = md5_II(d, a, b, c, x[k + 7], S42, 0x432AFF97);
        c = md5_II(c, d, a, b, x[k + 14], S43, 0xAB9423A7);
        b = md5_II(b, c, d, a, x[k + 5], S44, 0xFC93A039);
        a = md5_II(a, b, c, d, x[k + 12], S41, 0x655B59C3);
        d = md5_II(d, a, b, c, x[k + 3], S42, 0x8F0CCC92);
        c = md5_II(c, d, a, b, x[k + 10], S43, 0xFFEFF47D);
        b = md5_II(b, c, d, a, x[k + 1], S44, 0x85845DD1);
        a = md5_II(a, b, c, d, x[k + 8], S41, 0x6FA87E4F);
        d = md5_II(d, a, b, c, x[k + 15], S42, 0xFE2CE6E0);
        c = md5_II(c, d, a, b, x[k + 6], S43, 0xA3014314);
        b = md5_II(b, c, d, a, x[k + 13], S44, 0x4E0811A1);
        a = md5_II(a, b, c, d, x[k + 4], S41, 0xF7537E82);
        d = md5_II(d, a, b, c, x[k + 11], S42, 0xBD3AF235);
        c = md5_II(c, d, a, b, x[k + 2], S43, 0x2AD7D2BB);
        b = md5_II(b, c, d, a, x[k + 9], S44, 0xEB86D391);
        a = md5_AddUnsigned(a, AA);
        b = md5_AddUnsigned(b, BB);
        c = md5_AddUnsigned(c, CC);
        d = md5_AddUnsigned(d, DD);
    }
    return (md5_WordToHex(a) + md5_WordToHex(b) + md5_WordToHex(c) + md5_WordToHex(d)).toLowerCase();
}

class WebSocketCreater {
    constructor(params) {
        this.keepalive = true;
        this.serverTimeoutObj = null;
        this.timeoutObj = null;
        this.timeoutReconnect = null;
        this.lockReconnect = false;
        this.wsProgram = null;
        this.par = {
            url: '',
            protocols: undefined,
            call: undefined,
            heart: 30000,
            reconnect: 4000,
        };
        this.par = Object.assign(this.par, params);
        this.createWebSocket();
    }
    closeWS() {
        this.keepalive = false;
        if (this.wsProgram.readyState === 1) {
            this.wsProgram.close();
        }
    }
    createWebSocket() {
        try {
            this.wsProgram = new WebSocket(this.par.url, this.par.protocols);
            this.init(this.par.call);
        }
        catch (e) {
            console.log(e);
            this.reconnect();
        }
    }
    init(call) {
        this.wsProgram.onopen = () => {
            this.wsProgram.send('1');
            this.heartCheck();
        };
        this.wsProgram.onmessage = (evt) => {
            const res = JSON.parse(evt.data);
            call(res);
            this.heartCheck();
        };
        this.wsProgram.onclose = () => {
            if (this.keepalive) {
                this.reconnect();
            }
            else {
                // console.log('closed!');
            }
        };
    }
    heartCheck() {
        if (this.keepalive) {
            clearTimeout(this.timeoutObj);
            clearTimeout(this.serverTimeoutObj);
            this.timeoutObj = setTimeout(() => {
                if (this.wsProgram.readyState === 1) {
                    this.wsProgram.send('1');
                    this.serverTimeoutObj = setTimeout(() => {
                        this.wsProgram.close();
                    }, this.par.heart);
                }
            }, this.par.heart);
        }
    }
    reconnect() {
        if (this.lockReconnect) {
            return;
        }
        this.lockReconnect = true;
        clearTimeout(this.timeoutReconnect);
        this.timeoutReconnect = setTimeout(() => {
            this.createWebSocket();
            this.lockReconnect = false;
        }, this.par.reconnect);
    }
}

/*
 * Public API Surface of aai
 */

/**
 * Generated bundle index. Do not edit.
 */

export { AUTH_CONFIG, AUTH_CONFIG_FACTORY, AppErrorHandler, AuthConfig, AuthConfigService, CanDeactivateGuard, CustomHttpInterceptor, LoadingComponent, LoadingModule, LoginBgComponent, LoginBgModule, MessageModel, MessageService, QrCodeComponent, QrCodeModule, StorageType, VerifyComponent, VerifyModule, WebSocketCreater, formatDate, formatDateTime, httpParamSerializer, interceptorFactory, md5, passwordComplexity, toQueryString };
//# sourceMappingURL=aai.mjs.map
//# sourceMappingURL=aai.mjs.map
